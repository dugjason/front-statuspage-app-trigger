/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/accounts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Accounts
     * @description List the accounts of the company.
     */
    get: operations["list-accounts"];
    put?: never;
    /**
     * Create account
     * @description Create a new account.
     */
    post: operations["create-account"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/accounts/custom_fields": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Account's custom fields
     * @description Lists the custom fields that can be attached to an Account.
     */
    get: operations["list-account-custom-fields"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/accounts/{account_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Fetch an account
     * @description Fetches an account
     */
    get: operations["fetch-an-account"];
    put?: never;
    post?: never;
    /**
     * Delete an account
     * @description Deletes an account
     */
    delete: operations["delete-an-account"];
    options?: never;
    head?: never;
    /**
     * Update account
     * @description Updates an account.
     */
    patch: operations["update-account"];
    trace?: never;
  };
  "/accounts/{account_id}/contacts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List account contacts
     * @description Lists the contacts associated with an Account
     */
    get: operations["list-account-contacts"];
    put?: never;
    /**
     * Add contact to Account
     * @description Adds a list of contacts to an Account
     */
    post: operations["add-contact-to-account"];
    /**
     * Remove contact from Account
     * @description Removes a list of contacts from an Account
     */
    delete: operations["remove-contact-from-account"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/analytics/exports": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create a new analytics export
     * @description Create a new analytics export of messages or events (activities) over a specific time span.
     *     The export will be executed asynchronously. The response will include a link that can be used to retrieve the export status & result. Refer to the [Analytics](https://dev.frontapp.com/reference/analytics) topic for details about specific metrics.
     *
     */
    post: operations["create-analytics-export"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/analytics/exports/{export_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Fetch an analytics export
     * @description Fetch an analytics exports. Refer to the [Analytics](https://dev.frontapp.com/reference/analytics) topic for details about specific metrics.
     */
    get: operations["get-analytics-export"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/analytics/reports": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create a new analytics report
     * @description Create a new analytics report for a set of metrics over a specific time span. Different filters (e.g. Inbox v Tag v Teammates) will be joined with AND logic, but the IDs within a filter will be joined with OR logic (e.g. Inbox A or Inbox B, Tag A or Tag B).
     *     The report will be executed asynchronously. The response will include a link that can be used to retrieve the
     *     report status & result. Refer to the [Analytics](https://dev.frontapp.com/reference/analytics) topic for details about specific metrics.
     *
     */
    post: operations["create-analytics-report"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/analytics/reports/{report_uid}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Fetch an analytics report
     * @description Fetch an analytics report. Refer to the [Analytics](https://dev.frontapp.com/reference/analytics) topic for details about specific metrics.
     */
    get: operations["get-analytics-report"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/applications/{application_uid}/events": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Trigger application event
     * @description Triggers an event on behalf of an application. These events can trigger Front workflows, like rules.
     *     For more information, see the [developer docs](https://dev.frontapp.com/docs/application-triggers#/).
     *
     */
    post: operations["trigger-app-event"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/channels": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List channels
     * @description List the channels of the company.
     */
    get: operations["list-channels"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/channels/{channel_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get channel
     * @description Fetch a channel.
     */
    get: operations["get-channel"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update Channel
     * @description Update a channel.
     */
    patch: operations["update-channel"];
    trace?: never;
  };
  "/channels/{channel_id}/drafts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create draft
     * @description Create a draft message which is the first message of a new [conversation](https://dev.frontapp.com/reference/conversations).
     */
    post: operations["create-draft"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/channels/{channel_id}/incoming_messages": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Receive custom messages
     * @description Receive a custom message in Front. This endpoint is available for custom channels **ONLY**.
     */
    post: operations["receive-custom-messages"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/channels/{channel_id}/messages": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create message
     * @description Send a new message from a channel. This is one of the ways to create a new [conversation](https://dev.frontapp.com/reference/conversations#creating-a-new-conversation). The new conversation will support both messages and comments (discussions).
     */
    post: operations["create-message"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/channels/{channel_id}/validate": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Validate channel
     * @description Asynchronously validate an SMTP channel (this endpoint is irrelevant to other channel types). When you create an SMTP channel via the API, [create a channel](https://dev.frontapp.com/reference/post_inboxes-inbox-id-channels) with type smtp and the send_as set to the needed email address. You then [configure the email provider](https://help.front.com/en/articles/2081), after which you use this endpoint to asynchronously validate the SMTP settings.
     */
    post: operations["validate-channel"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/comments/{comment_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get comment
     * @description Fetches a comment.
     */
    get: operations["get-comment"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/comments/{comment_id}/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update comment
     * @description Update a comment in a [conversation](https://dev.frontapp.com/reference/conversations).
     */
    patch: operations["update-comment"];
    trace?: never;
  };
  "/comments/{comment_id}/download/{attachment_link_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Download attachment for a comment
     * @description Download an attachment file for a given comment ID
     */
    get: operations["download-attachment-for-a-comment"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/comments/{comment_id}/mentions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List comment mentions
     * @description List the teammates mentioned in a comment.
     */
    get: operations["list-comment-mentions"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/comments/{comment_id}/replies": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Add comment reply
     * @description Add a reply to a comment on a [conversation](https://dev.frontapp.com/reference/conversations). Comment replies visually indicate which comment is being responded to, helping users follow the conversation.
     */
    post: operations["add-comment-reply"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/company/rules": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List all company rules
     * @description List the company rules.
     */
    get: operations["list-all-company-rules"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/company/statuses": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List company ticket statuses
     * @description List the ticket statuses available for your company.
     */
    get: operations["list-company-ticket-statuses"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/company/statuses/{status_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get ticket status
     * @description Fetch a ticket status.
     */
    get: operations["get-ticket-status-by-id"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/company/tags": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List company tags
     * @description List the company tags.
     */
    get: operations["list-company-tags"];
    put?: never;
    /**
     * Create company tag
     * @description Create a company tag.
     */
    post: operations["create-company-tag"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/contact_groups": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List groups
     * @deprecated
     * @description List the contact groups.
     *
     *     > ⚠️ Deprecated endpoint
     *     >
     *     > This endpoint has been deprecated. Please use the compatible contact list endpoints instead.
     *     > - `GET /contact_lists`.
     *
     */
    get: operations["list-groups"];
    put?: never;
    /**
     * Create group
     * @deprecated
     * @description Create a new contact group in the default team (workspace).
     *
     *     > ⚠️ Deprecated endpoint
     *     >
     *     > This endpoint has been deprecated. Please use the compatible contact list endpoints instead.
     *     > - `POST /contact_lists`.
     *
     */
    post: operations["create-group"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/contact_groups/{contact_group_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Delete group
     * @deprecated
     * @description Delete a contact group.
     *
     *     > ⚠️ Deprecated endpoint
     *     >
     *     > This endpoint has been deprecated. Please use the compatible contact list endpoints instead.
     *     > - `DELETE /contact_lists/{contact_list_id}`.
     *
     */
    delete: operations["delete-group"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/contact_groups/{contact_group_id}/contacts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List contacts in group
     * @deprecated
     * @description List the contacts belonging to the requested group.
     *
     *     > ⚠️ Deprecated endpoint
     *     >
     *     > This endpoint has been deprecated. Please use the compatible contact list endpoints instead.
     *     > - `GET /contact_lists/{contact_list_id}/contacts`.
     *
     */
    get: operations["list-contacts-in-group"];
    put?: never;
    /**
     * Add contacts to group
     * @deprecated
     * @description Add contacts to the requested group.
     *
     *     > ⚠️ Deprecated endpoint
     *     >
     *     > This endpoint has been deprecated. Please use the compatible contact list endpoints instead.
     *     > - `POST /contact_lists/{contact_list_id}/contacts`.
     *
     */
    post: operations["add-contacts-to-group"];
    /**
     * Remove contacts from group
     * @description Remove contacts from the requested group.
     *
     *     > ⚠️ Deprecated endpoint
     *     >
     *     > This endpoint has been deprecated. Please use the compatible contact list endpoints instead.
     *     > - `DELETE /contact_lists/{contact_list_id}/contacts`.
     *
     */
    delete: operations["remove-contacts-from-group"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/contact_lists": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List contact lists
     * @description List contact lists.
     */
    get: operations["list-contact-lists"];
    put?: never;
    /**
     * Create contact list
     * @description Create a new contact list in the oldest active workspace that the token has access to. If you need to specify the workspace, we recommend using the [Create team contact list](https://dev.frontapp.com/reference/create-team-contact-list) endpoint instead.
     */
    post: operations["create-contact-list"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/contact_lists/{contact_list_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Delete contact list
     * @description Delete a contact lists.
     */
    delete: operations["delete-contact-list"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/contact_lists/{contact_list_id}/contacts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List contacts in contact list
     * @description List the contacts belonging to the requested contact list.
     */
    get: operations["list-contacts-in-contact-list"];
    put?: never;
    /**
     * Add contacts to contact list
     * @description Add contacts to the requested contact list.
     */
    post: operations["add-contacts-to-contact-list"];
    /**
     * Remove contacts from contact list
     * @description Remove contacts from the requested contact list.
     */
    delete: operations["remove-contacts-from-contact-list"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/contacts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List contacts
     * @description List the contacts of the company.
     */
    get: operations["list-contacts"];
    put?: never;
    /**
     * Create contact
     * @description Create a new contact at the company level.
     */
    post: operations["create-contact"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/contacts/custom_fields": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Contact's custom fields
     * @description Lists the custom fields that can be attached to a Contact.
     */
    get: operations["list-contact-custom-fields"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/contacts/merge": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Merge contacts
     * @description Merges the contacts specified into a single contact, deleting the merged-in contacts.
     *     If a target contact ID is supplied, the other contacts will be merged into that one.
     *     Otherwise, some contact in the contact ID list will be treated as the target contact.
     *     Merge conflicts will be resolved in the following ways:
     *       * name will prioritize manually-updated and non-private contact names
     *       * descriptions will be concatenated and separated by newlines in order from
     *         oldest to newest with the (optional) target contact's description first
     *       * all handles, groups, links, and notes will be preserved
     *       * other conflicts will use the most recently updated contact's value
     *
     */
    post: operations["merge-contacts"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/contacts/{contact_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get contact
     * @description Fetch a contact.
     */
    get: operations["get-contact"];
    put?: never;
    post?: never;
    /**
     * Delete a contact
     * @description Delete a contact.
     */
    delete: operations["delete-a-contact"];
    options?: never;
    head?: never;
    /**
     * Update a contact
     * @description Updates a contact.
     */
    patch: operations["update-a-contact"];
    trace?: never;
  };
  "/contacts/{contact_id}/conversations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List contact conversations
     * @description List the conversations for a contact in reverse chronological order (newest first). For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations).
     *
     */
    get: operations["list-contact-conversations"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/contacts/{contact_id}/handles": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Add contact handle
     * @description Adds a new handle to a contact.
     */
    post: operations["add-contact-handle"];
    /**
     * Delete contact handle
     * @description Remove a handle from a contact.
     */
    delete: operations["delete-contact-handle"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/contacts/{contact_id}/notes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List notes
     * @description List the notes added to a contact.
     */
    get: operations["list-notes"];
    put?: never;
    /**
     * Add note
     * @description Create a new note on a contact.
     */
    post: operations["add-note"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/conversations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List conversations
     * @description List the conversations in the company in reverse chronological order (most recently updated first). The order will respect your company's [bump settings](https://help.front.com/t/y729th/customize-when-conversations-bump-up), which determine when conversations bump to the top. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations).
     *
     */
    get: operations["list-conversations"];
    put?: never;
    /**
     * Create discussion conversation
     * @description Create a new [conversation](https://dev.frontapp.com/reference/conversations#creating-a-new-conversation) that only supports comments (known as discussions in Front). If you want to create a conversation that supports messages, use the [Create message](https://dev.frontapp.com/reference/post_channels-channel-id-messages) endpoint. If you want to add a comment to an existing conversation, use the [Add comment](https://dev.frontapp.com/reference/post_conversations-conversation-id-comments) endpoint.
     */
    post: operations["create-conversation"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/conversations/custom_fields": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Conversation's custom fields
     * @description Lists the custom fields that can be attached to a Conversation.
     */
    get: operations["list-conversation-custom-fields"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/conversations/search/{query}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search conversations
     * @description Search for conversations. Response will include a count of total matches and an array of conversations in descending order by last activity.
     *     See the [search syntax documentation](https://dev.frontapp.com/docs/search-1) for usage examples.
     *     **Note:** This endpoint is subject to [proportional rate limiting](https://dev.frontapp.com/docs/rate-limiting#additional-proportional-limiting) at 40% of your company's rate limit.
     *
     */
    get: operations["search-conversations"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/conversations/{conversation_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get conversation
     * @description Fetch a conversation.
     *
     */
    get: operations["get-conversation-by-id"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update conversation
     * @description Update a conversation.
     */
    patch: operations["update-conversation"];
    trace?: never;
  };
  "/conversations/{conversation_id}/assignee": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Update conversation assignee
     * @description Assign or unassign a conversation.
     */
    put: operations["update-conversation-assignee"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/conversations/{conversation_id}/comments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List conversation comments
     * @description List the comments in a conversation in reverse chronological order (newest first).
     */
    get: operations["list-conversation-comments"];
    put?: never;
    /**
     * Add comment
     * @description Add a comment to a [conversation](https://dev.frontapp.com/reference/conversations). If you want to create a new comment-only conversation, use the [Create discussion conversation](https://dev.frontapp.com/reference/create-conversation) endpoint.
     */
    post: operations["add-comment"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/conversations/{conversation_id}/drafts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List conversation drafts
     * @description List the drafts in a conversation.
     */
    get: operations["list-conversation-drafts"];
    put?: never;
    /**
     * Create draft reply
     * @description Create a new draft as a reply to the last message in the conversation.
     */
    post: operations["create-draft-reply"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/conversations/{conversation_id}/events": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List conversation events
     * @description List the events that occured for a conversation in reverse chronological order (newest first). The order will respect your company's [bump settings](https://help.front.com/t/y729th/customize-when-conversations-bump-up), which determine when conversations bump to the top.
     */
    get: operations["list-conversation-events"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/conversations/{conversation_id}/followers": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List conversation followers
     * @description List the teammates following a conversation.
     */
    get: operations["list-conversation-followers"];
    put?: never;
    /**
     * Add conversation followers
     * @description Adds teammates to the list of followers of a conversation.
     */
    post: operations["add-conversation-followers"];
    /**
     * Delete conversation followers
     * @description Removes teammates from the list of followers of a conversation.
     */
    delete: operations["delete-conversation-followers"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/conversations/{conversation_id}/inboxes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List conversation inboxes
     * @description List the inboxes in which a conversation is listed.
     */
    get: operations["list-conversation-inboxes"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/conversations/{conversation_id}/links": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Add conversation link
     * @description Adds one or more links to a conversation
     *     For more information on links, see the [Links](https://dev.frontapp.com/reference/links) topic.
     *
     */
    post: operations["add-conversation-link"];
    /**
     * Remove conversation links
     * @description Removes one or more links to a conversation.
     *     For more information on links, see the [Links](https://dev.frontapp.com/reference/links) topic.
     *
     */
    delete: operations["remove-conversation-links"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/conversations/{conversation_id}/messages": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List conversation messages
     * @description List the messages in a conversation in reverse chronological order (newest first).
     */
    get: operations["list-conversation-messages"];
    put?: never;
    /**
     * Create message reply
     * @description Reply to a conversation by sending a message and appending it to the conversation.
     */
    post: operations["create-message-reply"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/conversations/{conversation_id}/reminders": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update conversation reminders
     * @description Snooze or unsnooze a conversation for the provided user.
     *     For private conversations, reminders can only be created and edited through the API for teammates that own the conversation.
     *     For shared conversations, reminders created and edited through the API are shared for all teammates within the shared inbox(es) that the conversation belongs to.
     *
     */
    patch: operations["update-conversation-reminders"];
    trace?: never;
  };
  "/conversations/{conversation_id}/tags": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Add conversation tag
     * @description Adds one or more tags to a conversation
     */
    post: operations["add-conversation-tag"];
    /**
     * Remove conversation tag
     * @description Removes one or more tags to a conversation
     */
    delete: operations["remove-conversation-tag"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/custom_fields": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Contact's custom fields
     * @deprecated
     * @description Lists the custom fields that can be attached to a Contact.
     *
     *     > ⚠️ Deprecated endpoint
     *     >
     *     > This endpoint has been deprecated. Please use the fully compatible `GET /contacts/custom_fields` endpoint instead.
     *
     */
    get: operations["list-custom-fields"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/download/{attachment_link_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Download attachment
     * @description Download an attachment file.
     */
    get: operations["download-attachment"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/drafts/{draft_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Delete draft
     * @description Delete a draft message.
     */
    delete: operations["delete-draft"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/drafts/{message_id}/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Edit draft
     * @description Edit a draft message.
     */
    patch: operations["edit-draft"];
    trace?: never;
  };
  "/events": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List events
     * @description Lists all the detailed events which occurred in the inboxes of the company ordered in reverse chronological order (newest first).
     *     Refer to the [Events](https://dev.frontapp.com/reference/events) topic for more information, including sorting and filtering.
     *
     */
    get: operations["list-events"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/events/{event_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get event
     * @description Fetch an event.
     *     Refer to the [Events](https://dev.frontapp.com/reference/events) topic for more information, including sorting and filtering.
     *
     */
    get: operations["get-event"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/inboxes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List inboxes
     * @description List the inboxes of the company.
     */
    get: operations["list-inboxes"];
    put?: never;
    /**
     * Create inbox
     * @description Create an inbox in the oldest active workspace that the token has access to. If you need to specify the workspace, we recommend using the [Create team inbox](https://dev.frontapp.com/reference/create-team-inbox) endpoint instead.
     */
    post: operations["create-inbox"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/inboxes/custom_fields": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Inbox's custom fields
     * @description Lists the custom fields that can be attached to an Inbox.
     */
    get: operations["list-inbox-custom-fields"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/inboxes/{inbox_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get inbox
     * @description Fetch an inbox.
     */
    get: operations["get-inbox"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/inboxes/{inbox_id}/channels": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List inbox channels
     * @description List the channels in an inbox.
     */
    get: operations["list-inbox-channels"];
    put?: never;
    /**
     * Create a channel
     * @description Create a channel in an inbox.
     */
    post: operations["create-a-channel"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/inboxes/{inbox_id}/conversations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List inbox conversations
     * @description List the conversations in an inbox. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations).
     *
     */
    get: operations["list-inbox-conversations"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/inboxes/{inbox_id}/imported_messages": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Import message
     * @description Use this endpoint to import conversations into Front without sending data through a channel. Typical use cases include importing historical conversations or creating new conversations from non-standard sources, such as web form submissions that can't use the default Form channel (for example, forms that don't have static URLs or form providers that send email notifications after submission). Avoid using this endpoint for conversations that can be handled by a dedicated Front channel—instead, use the [Create message](https://dev.frontapp.com/reference/create-message) endpoint to send (rather than import) a new message.
     */
    post: operations["import-inbox-message"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/inboxes/{inbox_id}/teammates": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List inbox access
     * @description List the teammates with access to an inbox.
     */
    get: operations["list-inbox-access"];
    put?: never;
    /**
     * Add inbox access
     * @description Give access to one or more teammates to an inbox.
     */
    post: operations["add-inbox-access"];
    /**
     * Removes inbox access
     * @description Remove access of one or more teammates from an inbox.
     */
    delete: operations["removes-inbox-access"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/knowledge_base_articles/{article_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a knowledge base article
     * @description Fetches a knowledge base article.
     */
    get: operations["get-a-knowledge-base-article"];
    put?: never;
    post?: never;
    /**
     * Delete an article
     * @description Deletes an article and all its content and translations.
     */
    delete: operations["delete-an-article"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/knowledge_base_articles/{article_id}/content": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get knowledge base article with content in default locale
     * @description Fetches a knowledge base article with content in the default locale.
     */
    get: operations["get-knowledge-base-article-with-content-in-default-locale"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update article content in default locale.
     * @description Updates an article's content in the default locale
     */
    patch: operations["update-article-content-in-default-locale"];
    trace?: never;
  };
  "/knowledge_base_articles/{article_id}/download/{attachment_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Download attachment from an article
     * @description Downloads the attachment from an article.
     */
    get: operations["download-attachment-from-an-article"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/knowledge_base_articles/{article_id}/locales/{locale}/content": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get knowledge base article with content in specified locale
     * @description Fetches a knowledge base article with content for a given locale.
     */
    get: operations["get-knowledge-base-article-with-content-in-specified-locale"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update article content in specified locale
     * @description Updates an article's content for a given locale.
     */
    patch: operations["update-article-content-in-specified-locale"];
    trace?: never;
  };
  "/knowledge_base_categories/{category_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a knowledge base category
     * @description Fetches a knowledge base category.
     */
    get: operations["get-a-knowledge-base-category"];
    put?: never;
    post?: never;
    /**
     * Delete a knowledge base category
     * @description Deletes a knowledge base category.
     *
     *     > ⚠️ Warning
     *     >
     *     > When a category is deleted, all articles in the category are also deleted.
     *
     */
    delete: operations["delete-a-knowledge-base-category"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/knowledge_base_categories/{category_id}/articles": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List articles in a category
     * @description List articles in a category.
     */
    get: operations["list-articles-in-a-category"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/knowledge_base_categories/{category_id}/content": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get knowledge base category content in default locale
     * @description Fetches a knowledge base category with content in the default locale.
     */
    get: operations["get-knowledge-base-category-content-in-default-locale"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update knowledge base category in default locale
     * @description Updates a knowledge base category in the default locale. Will republish the knowledge base if the knowledge base is currently published.
     */
    patch: operations["update-knowledge-base-category-in-default-locale"];
    trace?: never;
  };
  "/knowledge_base_categories/{category_id}/locales/{locale}/content": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get knowledge base category with content in specified locale
     * @description Fetches a knowledge base category with content for a given locale.
     */
    get: operations["get-knowledge-base-category-with-content-in-specified-locale"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update knowledge base category in specified locale
     * @description Updates a knowledge base category for a given locale. Will republish the knowledge base if the knowledge base is currently published.
     */
    patch: operations["update-knowledge-base-category-in-specified-locale"];
    trace?: never;
  };
  "/knowledge_bases": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List knowledge bases
     * @description List the knowledge bases of the company.
     */
    get: operations["list-knowledge-bases"];
    put?: never;
    /**
     * Create a knowledge base
     * @description Creates a knowledge base.
     */
    post: operations["create-a-knowledge-base"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/knowledge_bases/{knowledge_base_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a knowledge base
     * @description Fetches a knowledge base.
     */
    get: operations["get-a-knowledge-base"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/knowledge_bases/{knowledge_base_id}/articles": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List articles in a knowledge base
     * @description List articles in a knowledge base
     */
    get: operations["list-articles-in-a-knowledge-base"];
    put?: never;
    /**
     * Create article in a knowledge base in default locale
     * @description Creates an article in a knowledge base in the default locale.
     */
    post: operations["create-article-in-a-knowledge-base-in-default-locale"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/knowledge_bases/{knowledge_base_id}/categories": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List categories in a knowledge base
     * @description List categories in a knowledge base.
     */
    get: operations["list-categories-in-a-knowledge-base"];
    put?: never;
    /**
     * Create knowledge base category in default locale
     * @description Creates a knowledge base category in the default locale.
     */
    post: operations["create-knowledge-base-category-in-default-locale"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/knowledge_bases/{knowledge_base_id}/content": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a knowledge base with content in default locale
     * @description Fetches a knowledge base with its content in the default locale.
     */
    get: operations["get-a-knowledge-base-with-content-in-default-locale"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update knowledge base in default locale
     * @description Updates a knowledge base in the default locale. Will republish the knowledge base if the knowledge base is currently published.
     */
    patch: operations["update-knowledge-base-in-default-locale"];
    trace?: never;
  };
  "/knowledge_bases/{knowledge_base_id}/locales/{locale}/articles": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create article in a knowledge base in specified locale
     * @description Create an article for a given locale in a knowledge base.
     */
    post: operations["create-article-in-a-knowledge-base-in-specified-locale"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/knowledge_bases/{knowledge_base_id}/locales/{locale}/categories": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create knowledge base category in specified locale
     * @description Creates a knowledge base category for a given locale.
     */
    post: operations["create-knowledge-base-category-in-specified-locale"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/knowledge_bases/{knowledge_base_id}/locales/{locale}/content": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a knowledge base with content in specified locale
     * @description Fetches a knowledge base with its content for a given locale.
     */
    get: operations["get-a-knowledge-base-with-content-in-specified-locale"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update knowledge base in specified locale
     * @description Updates a knowledge base for a given locale. Will republish the knowledge base if the knowledge base is currently published.
     */
    patch: operations["update-knowledge-base-in-specified-locale"];
    trace?: never;
  };
  "/links": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List links
     * @description List the links of the company paginated by id. Allows filtering by link type via the q.types param.
     *     These links include application objects; for more details, see the [Links](https://dev.frontapp.com/reference/links) topic.
     *
     */
    get: operations["list-links"];
    put?: never;
    /**
     * Create link
     * @description Create a link. You must supply either `pattern` or `external_url` in the request, but not both (`pattern` is for application objects while `external_url` is for standard links). If `pattern` is provided, the API call updates the application objects matching the exact pattern. Keep in mind this endpoint only creates or updates an existing link from an application object. It does not create new application objects. If the link is resolved to an installed links integration, any name retrieved from the integration will override the provided name in the request.
     */
    post: operations["create-link"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/links/custom_fields": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Link's custom fields
     * @description Lists the custom fields that can be attached to a Link.
     *     For more information on links, see the [Links](https://dev.frontapp.com/reference/links) topic.
     *
     */
    get: operations["list-link-custom-fields"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/links/{link_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get link
     * @description Fetch a link.
     *     For more information on links, see the [Links](https://dev.frontapp.com/reference/links) topic.
     *
     */
    get: operations["get-link"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update a link
     * @description Update a link.
     *     For more information on links, see the [Links](https://dev.frontapp.com/reference/links) topic.
     *
     */
    patch: operations["update-a-link"];
    trace?: never;
  };
  "/links/{link_id}/conversations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List link conversations
     * @description List the conversations linked to a specific link. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations).
     *     For more information on links, see the [Links](https://dev.frontapp.com/reference/links) topic.
     *
     */
    get: operations["list-link-conversations"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * API Token details
     * @description Fetch the details of the API token.
     */
    get: operations["api-token-details"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/message_template_folders": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List folders
     * @description List the message template folders.
     */
    get: operations["list-folders"];
    put?: never;
    /**
     * Create folder
     * @description Create a new message template folder in the oldest active workspace that the token has access to. If you need to specify the workspace, we recommend using the [Create team folder](https://dev.frontapp.com/reference/create-team-folder) endpoint instead.
     */
    post: operations["create-folder"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/message_template_folders/{message_template_folder_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get folder
     * @description Fetch a message template folder.
     */
    get: operations["get-folder"];
    put?: never;
    post?: never;
    /**
     * Delete folder
     * @description Delete a message template folder and child folders/templates
     */
    delete: operations["delete-folder"];
    options?: never;
    head?: never;
    /**
     * Update folder
     * @description Update message template folder
     */
    patch: operations["update-folder"];
    trace?: never;
  };
  "/message_template_folders/{message_template_folder_id}/message_template_folders": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get child folders
     * @description Fetch the child message templates folders of a message template folder.
     */
    get: operations["get-child-folders"];
    put?: never;
    /**
     * Create child folder
     * @description Create a new message template folder as a child of the given folder
     */
    post: operations["create-child-folder"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/message_template_folders/{message_template_folder_id}/message_templates": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get child templates
     * @description Fetch the child message templates of a message template folder.
     */
    get: operations["get-child-templates"];
    put?: never;
    /**
     * Create child template
     * @description Create a new message template as a child of the given folder
     */
    post: operations["create-child-template"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/message_templates": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List message templates
     * @description List the message templates.
     */
    get: operations["list-message-templates"];
    put?: never;
    /**
     * Create message template
     * @description Create a new message template in the oldest active workspace that the token has access to. If you need to specify the workspace, we recommend using the [Create team message template](https://dev.frontapp.com/reference/create-team-message-template) endpoint instead.
     */
    post: operations["create-message-template"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/message_templates/{message_template_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get message template
     * @description Fetch a message template.
     */
    get: operations["get-message-template"];
    put?: never;
    post?: never;
    /**
     * Delete message template
     * @description Delete a message template
     */
    delete: operations["delete-message-template"];
    options?: never;
    head?: never;
    /**
     * Update message template
     * @description Update message template
     */
    patch: operations["update-message-template"];
    trace?: never;
  };
  "/message_templates/{message_template_id}/download/{attachment_link_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Download attachment for a message template
     * @description Download an attachment file for a given message template ID
     */
    get: operations["download-attachment-for-a-message-template"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/messages/{message_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get message
     * @description Fetch a message.
     *
     *     > ℹ️ The HTTP Header `Accept` can be used to request the message in a different format.
     *     > By default, Front will return the documented JSON response. By requesting `message/rfc822`, the response will contain the message in the EML format (for email messages only).
     *
     */
    get: operations["get-message"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/messages/{message_id}/download/{attachment_link_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Download attachment for a message
     * @description Download an attachment file for a given message id. Should be used by partner channels.
     */
    get: operations["download-attachment-for-a-message"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/messages/{message_id}/seen": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get message seen status
     * @description Get the seen receipts for the given message. If no seen-by information is available, there will be a single entry for the first time the message was seen by any recipient. If seen-by information is available, there will be an entry for each recipient who has seen the message.
     */
    get: operations["get-message-seen-status"];
    put?: never;
    /**
     * Mark message seen
     * @description Mark an outbound message from Front as seen. Note, the message seen route should only be called in response to an actual end-user's message-seen action. In accordance with this behavior, the route is rate limited to 10 requests per message per hour.
     */
    post: operations["mark-message-seen"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rules": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List rules
     * @description List the rules of the company.
     */
    get: operations["list-rules"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rules/{rule_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get rule
     * @description Fetch a rule.
     */
    get: operations["get-rule"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/shifts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Shifts
     * @description List the shifts.
     */
    get: operations["list-shifts"];
    put?: never;
    /**
     * Create shift
     * @description Create a shift in the oldest active workspace that the token has access to. If you need to specify the workspace, we recommend using the [Create team shift](https://dev.frontapp.com/reference/create-team-shift) endpoint instead.
     */
    post: operations["create-shift"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/shifts/{shift_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get shift
     * @description Fetch a shift.
     */
    get: operations["get-shift"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update shift
     * @description Update a shift.
     */
    patch: operations["update-shift"];
    trace?: never;
  };
  "/shifts/{shift_id}/teammates": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List shift's teammates
     * @description List the teammates assigned to a shift.
     */
    get: operations["list-shifts-teammates"];
    put?: never;
    /**
     * Add teammates to shift
     * @description Add teammates to a shift. The selected teammates must be in the team that owns the shift.
     */
    post: operations["add-teammates-to-shift"];
    /**
     * Remove teammates from shift
     * @description Remove teammates from a shift.
     */
    delete: operations["remove-teammates-from-shift"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/signatures/{signature_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get signatures
     * @description Get the given signature.
     */
    get: operations["get-signatures"];
    put?: never;
    post?: never;
    /**
     * Delete signature
     * @description Delete signature
     */
    delete: operations["delete-signature"];
    options?: never;
    head?: never;
    /**
     * Update signature
     * @description Update signature
     */
    patch: operations["update-signature"];
    trace?: never;
  };
  "/tags": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List tags
     * @description List all the tags of the company that the API token has access to, whether they be company tags, team tags, or teammate tags.
     */
    get: operations["list-tags"];
    put?: never;
    /**
     * Create tag
     * @description Create a tag in the oldest team (workspace). This is a legacy endpoint. Use the Create company tag, Create team tag, or Create teammate tag endpoints instead.
     */
    post: operations["create-tag"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tags/{tag_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get tag
     * @description Fetch a tag.
     */
    get: operations["get-tag"];
    put?: never;
    post?: never;
    /**
     * Delete tag
     * @description Delete a tag.
     */
    delete: operations["delete-tag"];
    options?: never;
    head?: never;
    /**
     * Update a tag
     * @description Update a tag.
     */
    patch: operations["update-a-tag"];
    trace?: never;
  };
  "/tags/{tag_id}/children": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List tag children
     * @description List the children of a specific tag.
     */
    get: operations["list-tag-children"];
    put?: never;
    /**
     * Create child tag
     * @description Creates a child tag.
     */
    post: operations["create-child-tag"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tags/{tag_id}/conversations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List tagged conversations
     * @description List the conversations tagged with a tag. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations).
     *
     */
    get: operations["list-tagged-conversations"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teammate_groups": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List teammate groups
     * @description List the teammate groups in the company.
     */
    get: operations["list-company-teammate-groups"];
    put?: never;
    /**
     * Create teammate group
     * @description Create a new teammate group.
     */
    post: operations["create-company-teammate-group"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teammate_groups/{teammate_group_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get teammate group
     * @description Fetch a teammate group.
     */
    get: operations["get-company-teammate-group"];
    put?: never;
    post?: never;
    /**
     * Delete teammate group
     * @description Deletes a teammate group. Note - You cannot delete a teammate group that is managed by SCIM.
     */
    delete: operations["delete-company-teammate-group"];
    options?: never;
    head?: never;
    /**
     * Update a teammate group
     * @description Updates a teammate group. Note - You cannot modify a teammate group that is managed by SCIM.
     */
    patch: operations["update-a-company-teammate-group"];
    trace?: never;
  };
  "/teammate_groups/{teammate_group_id}/inboxes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List teammate group team inboxes
     * @description List inboxes that the teammate group has access to via its associated teams.
     */
    get: operations["list-company-teammate-group-team-inboxes"];
    put?: never;
    /**
     * Add teammate group team inboxes
     * @description Links non-public inboxes to the teammate group. The inbox must be part of a team that has been added to the teammate group.
     */
    post: operations["add-company-teammate-group-team-inboxes"];
    /**
     * Remove teammate group team inboxes
     * @description Unlinks non-public inboxes from the teammate group.
     */
    delete: operations["remove-company-teammate-group-team-inboxes"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teammate_groups/{teammate_group_id}/teammates": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List teammate group teammates
     * @description List teammate group teammates.
     */
    get: operations["list-company-teammate-group-teammates"];
    put?: never;
    /**
     * Add teammate group teammates
     * @description Add teammate group teammates. Note - You cannot modify a teammate group that is managed by SCIM.
     */
    post: operations["add-company-teammate-group-teammates"];
    /**
     * Remove teammate group teammates
     * @description Remove teammate group teammates. Note - You cannot modify a teammate group that is managed by SCIM.
     */
    delete: operations["remove-company-teammate-group-teammates"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teammate_groups/{teammate_group_id}/teams": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List teammate group teams
     * @description List teams added to the teammate group. Any teams added to the teammate group will automatically link public inboxes.
     */
    get: operations["list-company-teammate-group-teams"];
    put?: never;
    /**
     * Add teammate group teams
     * @description Adds teams to the teammate group. Any teams added to the teammate group will automatically link public inboxes. Non-public inboxes can be added to the teammate group separately.
     */
    post: operations["add-company-teammate-group-teams"];
    /**
     * Remove teammate group teams
     * @description Remove teams from the teammate group. Unlinks to any associated team inboxes.
     */
    delete: operations["remove-company-teammate-group-teams"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teammates": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List teammates
     * @description List the teammates in the company.
     */
    get: operations["list-teammates"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teammates/custom_fields": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Teammate's custom fields
     * @description Lists the custom fields that can be attached to a Teammate.
     */
    get: operations["list-teammate-custom-fields"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teammates/{teammate_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get teammate
     * @description Fetch a teammate.
     */
    get: operations["get-teammate"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update teammate
     * @description Update a teammate.
     */
    patch: operations["update-teammate"];
    trace?: never;
  };
  "/teammates/{teammate_id}/channels": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List teammate channels
     * @description List the channels of a teammate.
     */
    get: operations["list-teammate-channels"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teammates/{teammate_id}/contact_groups": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List teammate groups
     * @deprecated
     * @description List the contact groups belonging to the requested teammate.
     *
     *     > ⚠️ Deprecated endpoint
     *     >
     *     > This endpoint has been deprecated. Please use the compatible contact list endpoints instead.
     *     > - `GET /teammates/{teammate_id}/contact_lists`.
     *
     */
    get: operations["list-teammate-groups"];
    put?: never;
    /**
     * Create teammate group
     * @deprecated
     * @description Create a new contact group for the requested teammate.
     *
     *     > ⚠️ Deprecated endpoint
     *     >
     *     > This endpoint has been deprecated. Please use the compatible contact list endpoints instead.
     *     > - `POST /teammates/{teammate_id}/contact_lists`.
     *
     */
    post: operations["create-teammate-group"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teammates/{teammate_id}/contact_lists": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List teammate contact lists
     * @description List the contact lists belonging to the requested teammate.
     */
    get: operations["list-teammate-contact-lists"];
    put?: never;
    /**
     * Create teammate contact list
     * @description Create a new contact list for the requested teammate.
     */
    post: operations["create-teammate-contact-list"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teammates/{teammate_id}/contacts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List teammate contacts
     * @description List the contacts of a teammate.
     */
    get: operations["list-teammate-contacts"];
    put?: never;
    /**
     * Create teammate contact
     * @description Create a contact for a teammate.
     */
    post: operations["create-teammate-contact"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teammates/{teammate_id}/conversations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List assigned conversations
     * @description List the conversations assigned to a teammate in reverse chronological order (most recently updated first). For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations).
     *
     */
    get: operations["list-assigned-conversations"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teammates/{teammate_id}/inboxes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List teammate inboxes
     * @deprecated
     * @description Returns list of inboxes the teammate has access to.
     */
    get: operations["list-teammate-inboxes"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teammates/{teammate_id}/message_template_folders": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List teammate folders
     * @description List the message template folders belonging to the requested teammate.
     */
    get: operations["list-teammate-folders"];
    put?: never;
    /**
     * Create teammate folder
     * @description Create a new message template folder belonging to the requested teammate.
     */
    post: operations["create-teammate-folder"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teammates/{teammate_id}/message_templates": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List teammate message templates
     * @description List the message templates belonging to the requested teammate.
     */
    get: operations["list-teammate-message-templates"];
    put?: never;
    /**
     * Create teammate message template
     * @description Create a new message template for the given teammate
     */
    post: operations["create-teammate-message-template"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teammates/{teammate_id}/rules": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List teammate rules
     * @description List the rules of a teammate.
     */
    get: operations["list-teammate-rules"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teammates/{teammate_id}/shifts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Teammate Shifts
     * @description Lists all the shifts for the teammate.
     */
    get: operations["list-teammate-shifts"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teammates/{teammate_id}/signatures": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List teammate signatures
     * @description List the signatures belonging to the given teammate.
     */
    get: operations["list-teammate-signatures"];
    put?: never;
    /**
     * Create teammate signature
     * @description Create a new signature for the given teammate
     */
    post: operations["create-teammate-signature"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teammates/{teammate_id}/tags": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List teammate tags
     * @description List the tags for a teammate.
     */
    get: operations["list-teammate-tags"];
    put?: never;
    /**
     * Create teammate tag
     * @description Create a tag for a teammate.
     */
    post: operations["create-teammate-tag"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List teams
     * @description List the teams (workspaces) in the company.
     */
    get: operations["list-teams"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/{team_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get team
     * @description Fetch a team (workspace).
     */
    get: operations["get-team"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/{team_id}/channels": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List team channels
     * @description List the channels of a team (workspace).
     */
    get: operations["list-team-channels"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/{team_id}/contact_groups": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List team groups
     * @deprecated
     * @description List contact groups belonging to the requested team (workspace).
     *
     *     > ⚠️ Deprecated endpoint
     *     >
     *     > This endpoint has been deprecated. Please use the compatible contact list endpoints instead.
     *     > - `GET /teams/{team_id}/contact_lists`.
     *
     */
    get: operations["list-team-groups"];
    put?: never;
    /**
     * Create team group
     * @deprecated
     * @description Create a new contact group for the requested team (workspace).
     *
     *     > ⚠️ Deprecated endpoint
     *     >
     *     > This endpoint has been deprecated. Please use the compatible contact list endpoints instead.
     *     > - `POST /teams/{team_id}/contact_lists`.
     *
     */
    post: operations["create-team-group"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/{team_id}/contact_lists": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List team contact lists
     * @description List contact lists belonging to the requested team (workspace).
     */
    get: operations["list-team-contact-lists"];
    put?: never;
    /**
     * Create team contact list
     * @description Create a new contact list for the requested team (workspace).
     */
    post: operations["create-team-contact-list"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/{team_id}/contacts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List team contacts
     * @description List the contacts of a team (workspace).
     */
    get: operations["list-team-contacts"];
    put?: never;
    /**
     * Create team contact
     * @description Create a contact for a team (workspace).
     */
    post: operations["create-team-contact"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/{team_id}/inboxes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List team inboxes
     * @description List the inboxes belonging to a team (workspace).
     */
    get: operations["list-team-inboxes"];
    put?: never;
    /**
     * Create team inbox
     * @description Create an inbox for a team (workspace).
     */
    post: operations["create-team-inbox"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/{team_id}/message_template_folders": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List team folders
     * @description List the message template folders belonging to the requested team (workspace).
     */
    get: operations["list-team-folders"];
    put?: never;
    /**
     * Create team folder
     * @description Create a new message template folder belonging to the requested team (workspace).
     */
    post: operations["create-team-folder"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/{team_id}/message_templates": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List team message templates
     * @description List the message templates belonging to the requested team (workspace).
     */
    get: operations["list-team-message-templates"];
    put?: never;
    /**
     * Create team message template
     * @description Create a new message template for the given team (workspace).
     */
    post: operations["create-team-message-template"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/{team_id}/rules": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List team rules
     * @description List the rules of a team (workspace).
     */
    get: operations["list-team-rules"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/{team_id}/shifts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List team Shifts
     * @description List the shifts for a team (workspace).
     */
    get: operations["list-team-shifts"];
    put?: never;
    /**
     * Create team shift
     * @description Create a shift for a team (workspace).
     */
    post: operations["create-team-shift"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/{team_id}/signatures": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List team signatures
     * @description List the signatures belonging to the given team (workspace).
     */
    get: operations["list-team-signatures"];
    put?: never;
    /**
     * Create team signature
     * @description Create a new signature for the given team (workspace).
     */
    post: operations["create-team-signature"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/{team_id}/tags": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List team tags
     * @description List the tags for a team (workspace).
     */
    get: operations["list-team-tags"];
    put?: never;
    /**
     * Create team tag
     * @description Create a tag for a team (workspace).
     */
    post: operations["create-team-tag"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/{team_id}/teammates": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Add teammates to team
     * @description Add one or more teammates to a team (workspace).
     */
    post: operations["add-teammates-to-team"];
    /**
     * Remove teammates from team
     * @description Remove one or more teammates from a team (workspace).
     */
    delete: operations["remove-teammates-from-team"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Account: {
      /** @description Name of the Account */
      name?: string;
      /** @description Account description */
      description?: string;
      /** @description List of domains associated with the Account */
      domains?: string[];
      /** @description ID of the Account in an external system */
      external_id?: string;
      /** @description Custom fields for this account */
      custom_fields?: components["schemas"]["CustomFieldParameter"];
    };
    AccountIds: {
      account_ids: components["schemas"]["ResourceID"][];
    };
    AccountPatch: {
      /** @description Name of the Account */
      name?: string;
      /** @description Account description */
      description?: string;
      /** @description List of domains associated with the Account */
      domains?: string[];
      /** @description Custom fields for this account. If you want to keep all custom fields the same when updating this resource, do not include any custom fields in the update. If you want to update custom fields, make sure to include all custom fields, not just the fields you want to add or update. If you send only the custom fields you want to update, the other custom fields will be erased. You can retrieve the existing custom fields before making the update to note the current fields. */
      custom_fields?: components["schemas"]["CustomFieldParameter"];
    };
    AccountResponse: {
      _links: {
        /**
         * @description Link to resource
         * @example https://yourCompany.api.frontapp.com/accounts/acc_76
         */
        self?: string;
        related?: {
          /**
           * @description Link to contacts associated to the account
           * @example https://yourCompany.api.frontapp.com/accounts/acc_76/contacts
           */
          contacts?: string;
        };
      };
      /**
       * @description Unique identifier of the account
       * @example acc_76
       */
      id: string;
      /**
       * @description Account name
       * @example Dunder Mifflin, Inc.
       */
      name: string;
      /**
       * @description URL of the Account's logo
       * @example https://yourCompany.api.frontapp.com/accounts/acc_aq/logo-1654309308278
       */
      logo_url: string | null;
      /**
       * @description Account Description
       * @example Limitless Paper in a Paperless World
       */
      description: string | null;
      /** @description List of domains associated to the Account */
      domains: string[];
      /**
       * @description ID of the Account in an External system, such as your backoffice system or CRM
       * @example 8739674733
       */
      external_id: string | null;
      /** @description Custom fields for this account */
      custom_fields: components["schemas"]["CustomFieldParameter"];
      /**
       * @description Timestamp when the account was created
       * @example 1622672452.363
       */
      created_at?: number;
      /**
       * @description Timestamp when the account was updated
       * @example 1654309308.278
       */
      updated_at?: number;
    };
    AddContactsToList: {
      /** @description List of IDs of the contacts to add in the requested contact list. Alternatively, you can supply the contact source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
      contact_ids: components["schemas"]["ResourceID"][];
    };
    /** @enum {string} */
    AnalyticsActivitiesColumns:
      | "Activity ID"
      | "Type"
      | "Source"
      | "Message ID"
      | "Conversation ID"
      | "Ticket IDs"
      | "Segment"
      | "Segment start"
      | "Segment end"
      | "Direction"
      | "Status"
      | "Status at activity time"
      | "Inbox"
      | "Inbox API ID"
      | "Inbox at activity time"
      | "Inbox API IDs at activity time"
      | "Previous inbox IDs"
      | "Message date"
      | "Autoreply"
      | "Reaction time"
      | "Total reply time"
      | "Handle time"
      | "Response time"
      | "Stage resolution time"
      | "Replies to resolution"
      | "Ticket resolution time"
      | "Ticket replies to resolution"
      | "Attributed to"
      | "Assignee"
      | "Author"
      | "Contact name"
      | "Contact handle"
      | "Account names"
      | "From"
      | "To"
      | "Cc"
      | "Bcc"
      | "Extract"
      | "Tags"
      | "Tag API IDs"
      | "Tags at activity time"
      | "Tag API IDs at activity time"
      | "Tag application duration"
      | "Activity API ID"
      | "Message API ID"
      | "Comment API ID"
      | "Conversation API ID"
      | "Message original ID"
      | "New Conversation"
      | "First response"
      | "Business hours"
      | "Subject"
      | "Account name"
      | "Survey rating"
      | "Survey comment"
      | "Segment closed"
      | "Segment contains messages"
      | "Last segment activity"
      | "Added tag"
      | "Added tag API ID"
      | "Removed tag"
      | "Removed tag API ID"
      | "Segment cumulative teammates";
    AnalyticsActivitiesExportsColumns: {
      /**
       * @description List of the columns to include in the export.
       *
       * @default [
       *       "Activity ID",
       *       "Type",
       *       "Source",
       *       "Message ID",
       *       "Conversation ID",
       *       "Ticket IDs",
       *       "Segment",
       *       "Segment start",
       *       "Segment end",
       *       "Direction",
       *       "Status",
       *       "Status at activity time",
       *       "Inbox",
       *       "Inbox API ID",
       *       "Inbox at activity time",
       *       "Inbox API IDs at activity time",
       *       "Previous inbox IDs",
       *       "Message date",
       *       "Autoreply",
       *       "Reaction time",
       *       "Total reply time",
       *       "Handle time",
       *       "Response time",
       *       "Ticket resolution time",
       *       "Ticket replies to resolution",
       *       "Attributed to",
       *       "Assignee",
       *       "Author",
       *       "Contact name",
       *       "Contact handle",
       *       "Account names",
       *       "From",
       *       "To",
       *       "Cc",
       *       "Bcc",
       *       "Extract",
       *       "Tags",
       *       "Tag API IDs",
       *       "Tags at activity time",
       *       "Tag API IDs at activity time",
       *       "Tag application duration",
       *       "Activity API ID",
       *       "Message API ID",
       *       "Comment API ID",
       *       "Conversation API ID",
       *       "Message original ID",
       *       "New Conversation",
       *       "First response",
       *       "Business hours",
       *       "Subject",
       *       "Account name",
       *       "Survey rating",
       *       "Survey comment",
       *       "Segment closed",
       *       "Segment contains messages",
       *       "Last segment activity",
       *       "Added tag",
       *       "Added tag API ID",
       *       "Removed tag",
       *       "Removed tag API ID",
       *       "Segment cumulative teammates"
       *     ]
       */
      columns: components["schemas"]["AnalyticsActivitiesColumns"][];
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "events";
    };
    AnalyticsExportRequest: {
      /**
       * @description The type of export to create. The type you specify determines which columns are available for the export.
       * @enum {string}
       */
      type: "messages" | "events";
      /** @description Start time of the data to include in the export (seconds since 1970-01-01T00:00:00+00). Will be rounded down to the start of the day. */
      start: number;
      /** @description End time of the data to include in the export (seconds since 1970-01-01T00:00:00+00). Will be rounded up to the end of the day. */
      end: number;
      /** @description [IANA name](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) of the timezone to format the dates with. If omitted, the export will use Etc/UTC. */
      timezone?: string;
      filters?: components["schemas"]["AnalyticsFilters"];
    } & (
      | components["schemas"]["AnalyticsMessagesExportColumns"]
      | components["schemas"]["AnalyticsActivitiesExportsColumns"]
    );
    AnalyticsExportResponse: {
      _links: {
        /**
         * @description Link to analytics export
         * @example https://yourCompany.api.frontapp.com/analytics/exports/exp_o9y1a
         */
        self?: string;
      };
      /**
       * @description The public ID of the analytics export
       * @example exp_o9y1a
       */
      id: string;
      /**
       * @description Status of the analytics
       * @example running
       * @enum {string}
       */
      status: "running" | "done" | "too_big" | "failed";
      /**
       * @description Number ranging from 0 to 100 corresponding to the percentage of the analytics processed.
       * @example 20
       */
      progress: number;
      /**
       * @description The URL from which the export data can be downloaded. Only displays after you make a GET request to the link included in the POST response.
       * @example https://api.frontapp.com/analytics/exports/exp_o9y1a/download
       */
      url?: string;
      /**
       * @description The filename of the export with extension included. Only displays after you make a GET request to the link included in the POST response.
       * @example export-messages-yourCompany-2023-07-19-212d-e55df0.csv
       */
      filename?: string;
      /**
       * @description Size (in bytes) of the export data. Only displays after you make a GET request to the link included in the POST response.
       * @example 26639
       */
      size?: number | null;
      /**
       * @description Timestamp (in seconds) at which the export was requested.
       * @example 1703103649.159
       */
      created_at?: number;
      filters: components["schemas"]["AnalyticsFilters"];
    };
    /** @description Resources to compute the analytics for. Defaults to all. */
    AnalyticsFilters:
      | components["schemas"]["TagIds"]
      | components["schemas"]["TeammateIds"]
      | components["schemas"]["ChannelIds"]
      | components["schemas"]["InboxIds"]
      | components["schemas"]["TeamIds"]
      | components["schemas"]["AccountIds"];
    /** @enum {string} */
    AnalyticsMessagesColumns:
      | "Message ID"
      | "Conversation ID"
      | "Ticket IDs"
      | "Segment"
      | "Direction"
      | "Status"
      | "Inbox"
      | "Inbox API ID"
      | "Inbox at activity time"
      | "Inbox API IDs at activity time"
      | "Message date"
      | "Autoreply"
      | "Reaction time"
      | "Total reply time"
      | "Handle time"
      | "Response time"
      | "Attributed to"
      | "Assignee"
      | "Author"
      | "Contact name"
      | "Contact handle"
      | "Account names"
      | "From"
      | "To"
      | "Cc"
      | "Bcc"
      | "Extract"
      | "Tags"
      | "Tag API IDs"
      | "Message API ID"
      | "Conversation API ID"
      | "New Conversation"
      | "First response"
      | "Business hours"
      | "Subject"
      | "Segment start"
      | "Segment end"
      | "Segment closed"
      | "Last segment activity"
      | "Segment cumulative teammates";
    AnalyticsMessagesExportColumns: {
      /**
       * @description List of the columns to include in the export.
       *
       * @default [
       *       "Message ID",
       *       "Conversation ID",
       *       "Ticket IDs",
       *       "Segment",
       *       "Direction",
       *       "Status",
       *       "Inbox",
       *       "Inbox API ID",
       *       "Inbox at activity time",
       *       "Inbox API IDs at activity time",
       *       "Message date",
       *       "Autoreply",
       *       "Reaction time",
       *       "Total reply time",
       *       "Handle time",
       *       "Response time",
       *       "Attributed to",
       *       "Assignee",
       *       "Author",
       *       "Contact name",
       *       "Contact handle",
       *       "Account names",
       *       "From",
       *       "To",
       *       "Cc",
       *       "Bcc",
       *       "Extract",
       *       "Tags",
       *       "Tag API IDs",
       *       "Message API ID",
       *       "Conversation API ID",
       *       "New Conversation",
       *       "First response",
       *       "Business hours",
       *       "Subject",
       *       "Segment start",
       *       "Segment end",
       *       "Segment closed",
       *       "Last segment activity",
       *       "Segment cumulative teammates"
       *     ]
       */
      columns: components["schemas"]["AnalyticsMessagesColumns"][];
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "messages";
    };
    /** @enum {string} */
    AnalyticsMetricId:
      | "avg_csat_survey_response"
      | "avg_first_response_time"
      | "avg_handle_time"
      | "avg_replies_to_resolution"
      | "avg_resolution_time"
      | "avg_response_time"
      | "avg_sla_breach_time"
      | "avg_total_reply_time"
      | "new_segments_count"
      | "num_active_segments_full"
      | "num_archived_segments"
      | "num_archived_segments_with_reply"
      | "num_csat_survey_response"
      | "num_messages_received"
      | "num_messages_sent"
      | "num_sla_breach"
      | "pct_csat_survey_satisfaction"
      | "pct_resolved_on_first_reply"
      | "pct_tagged_conversations"
      | "num_closed_segments"
      | "num_open_segments_start"
      | "num_open_segments_end"
      | "num_resolved_segments"
      | "num_unresolved_active_segments"
      | "num_workload_segments";
    AnalyticsReportRequest: {
      /** @description Start time of the data to include in the export (seconds since 1970-01-01T00:00:00+00). Will be rounded down to the start of the day. */
      start: number;
      /** @description End time of the data to include in the export (seconds since 1970-01-01T00:00:00+00). Will be rounded up to the end of the day. */
      end: number;
      /** @description [IANA name](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) of the timezone to format the dates with. If omitted, the export will use Etc/UTC. */
      timezone?: string;
      filters?: components["schemas"]["AnalyticsFilters"];
      /** @description List of the metrics required. */
      metrics: components["schemas"]["AnalyticsMetricId"][];
    };
    AnalyticsReportResponse: {
      _links: {
        /**
         * @description Link to analytics job.
         * @example https://yourCompany.api.frontapp.com/analytics/reports/b45efa66237cc453252d9019449c7a64f5cfdb491b6c2c1d6df33c1050d60e33
         */
        self?: string;
      };
      /**
       * @description The UID of the analytics report
       * @example b45efa66237cc453252d9019449c7a64f5cfdb491b6c2c1d6df33c1050d60e33
       */
      uid: string;
      /**
       * @description Status of the report.
       * @example done
       * @enum {string}
       */
      status: "running" | "done" | "failed";
      /**
       * @description Number ranging from 0 to 100 corresponding to the percentage of the analytics processed.
       * @example 100
       */
      progress: number;
      /** @description The metrics computed for the report. */
      metrics: components["schemas"]["AnalyticsScalar"][];
    };
    AnalyticsScalar: {
      id: components["schemas"]["AnalyticsMetricId"];
      type: components["schemas"]["AnalyticsScalarType"];
      value: components["schemas"]["AnalyticsScalarValue"];
    };
    /**
     * @example number
     * @enum {string}
     */
    AnalyticsScalarType:
      | "number"
      | "percentage"
      | "string"
      | "duration"
      | "resource";
    /** @description The value of a scalar metric. */
    AnalyticsScalarValue:
      | (
          | number
          | string
          | {
              label?: string;
              resource?: {
                id: string;
                _links: {
                  /** @description Link to a resource. */
                  self?: string;
                };
              };
            }
        )
      | null;
    AppEvent: {
      /** @description The type of event this application should handle */
      event_type: string;
      /** @description Identifier for the app object to which the event is related. Either an ID or an external link is required.
       *     If both are provided, the ID will be favored.
       *      */
      app_object: {
        /** @description ID of the app object */
        id?: string;
        /** @description External link of the app object */
        ext_link?: string;
      };
    };
    Attachment: {
      /**
       * @description The unique identifier of the attachment.
       * @example fil_3q8a7mby
       */
      id: string;
      /**
       * @description Name of the attached file
       * @example Andy_Anger_Management_Certificate.png
       */
      filename: string;
      /**
       * @description URL to download the attached file
       * @example https://yourCompany.api.frontapp.com/download/fil_3q8a7mby
       */
      url: string;
      /**
       * @description Content type of the attached file in [MIME format](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types). Note that some attachments types may not be supported.
       * @example image/png
       */
      content_type: string;
      /**
       * @description Size (in byte) of the attached file
       * @example 4405
       */
      size: number;
      /** @description Attachment metadata */
      metadata: {
        /**
         * @description Whether or not the attachment is part of the message body
         * @example true
         */
        is_inline?: boolean;
        /**
         * @description Unique identifier used to link an attachment to where it is used in the message body
         * @example 526b45586d0e6b1c484afab63d1ef0be
         */
        cid?: string;
      };
    };
    ChannelIds: {
      channel_ids: components["schemas"]["ResourceID"][];
    };
    ChannelResponse: {
      _links?: {
        /**
         * @description Link to resource
         * @example https://yourCompany.api.frontapp.com/channels/cha_1gv4
         */
        self?: string;
        related?: {
          /**
           * @description Link to channel inbox
           * @example https://yourCompany.api.frontapp.com/inboxes/inb_1ix6
           */
          inbox?: string;
          /**
           * @description Link to channel owner
           * @example https://yourCompany.api.frontapp.com/teams/jen_k30
           */
          owner?: string;
        };
      };
      /**
       * @description Unique identifier for the channel
       * @example cha_1gv4
       */
      id?: string;
      /**
       * @description The name of the channel
       * @example Paper Sales Inbox
       */
      name?: string;
      /**
       * @description Address receiving the messages
       * @example sales@dundermifflin.com
       */
      address?: string;
      /**
       * @description Type of the channel
       * @example gmail
       * @enum {string}
       */
      types?:
        | "custom"
        | "facebook"
        | "gmail"
        | "google_play"
        | "imap"
        | "intercom"
        | "form"
        | "office365"
        | "layer_anon"
        | "smtp"
        | "talkdesk"
        | "truly"
        | "twilio"
        | "twilio_whatsapp"
        | "twitter"
        | "twitter_dm"
        | "yalo_wha"
        | "front_chat"
        | "front_mail";
      /**
       * @description Address which appears as the sender for messages sent from Front
       * @example sales@dundermifflin.com
       */
      send_as?: string;
      /** @description Channel settings */
      settings?: {
        /**
         * @description The time (measured in seconds) that users have to undo a send operation in the channel.
         * @example 15
         * @enum {integer}
         */
        undo_send_time?: 0 | 5 | 10 | 15 | 30 | 60;
        /**
         * @description Whether teammates without inbox access can reply on this channel. Only present for shared channels; omitted for private channels.
         * @example false
         */
        all_teammates_can_reply?: boolean;
      };
      /**
       * @description Whether or not the channel is individual
       * @default false
       * @example false
       */
      is_private: boolean;
      /**
       * @description Whether or not the channel configuration is valid
       * @default false
       * @example true
       */
      is_valid: boolean;
    };
    CommentResponse: {
      _links: {
        /**
         * @description Link to resource
         * @example https://yourCompany.api.frontapp.com/comments/com_1ywg3f2
         */
        self?: string;
        related?: {
          /**
           * @description Link to comment's conversation
           * @example https://yourCompany.api.frontapp.com/conversations/cnv_y4xb93i
           */
          conversation?: string;
          /**
           * @description Link to comment mentions
           * @example https://yourCompany.api.frontapp.com/comments/com_1ywg3f2/mentions
           */
          mentions?: string;
        };
      };
      /**
       * @description Unique identifier of the comment
       * @example com_1ywg3f2
       */
      id: string;
      /** @description Teammate who wrote the comment */
      author: components["schemas"]["TeammateResponse"];
      /**
       * @description Content of the comment
       * @example Sometimes I'll start a sentence and I don't even know where it's going. I just hope I find it along the way.
       */
      body: string;
      /**
       * @description Date at which the comment was posted
       * @example 1698943401.378
       */
      posted_at?: number;
      /** @description List of files attached to the comment */
      attachments: components["schemas"]["Attachment"][];
      /**
       * @description Whether or not the comment is pinned in its conversation
       * @example true
       */
      is_pinned: boolean;
    };
    Contact: {
      /** @description Contact name */
      name?: string;
      /** @description Contact description */
      description?: string;
      /**
       * Format: binary
       * @description Binary data of avatar. Must use `Content-Type: multipart/form-data` if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb) or read more about [Attachments](https://dev.frontapp.com/docs/attachments-1).  Max 25 MB.
       */
      avatar?: string;
      /** @description List of all the links of the contact */
      links?: string[];
      /** @description List of all the group names the contact belongs to. It will automatically create missing groups. ⚠️ Deprecated. Use `list_names` instead. */
      group_names?: string[];
      /** @description List of all the contact list names the contact belongs to. It will automatically create missing groups */
      list_names?: string[];
      /** @description Custom fields for this contact. If you want to keep all custom fields the same when updating this resource, do not include any custom fields in the update. If you want to update custom fields, make sure to include all custom fields, not just the fields you want to add or update. If you send only the custom fields you want to update, the other custom fields will be erased. You can retrieve the existing custom fields before making the update to note the current fields. */
      custom_fields?: components["schemas"]["CustomFieldParameter"];
    };
    ContactHandle: {
      /**
       * @description Handle used to reach the contact.
       * @example dwight@limitlesspaper.com
       */
      handle: string;
      /**
       * @description Source of the handle. Can be `email`, `phone`, `twitter`, `facebook`, `intercom`, `front_chat`, or `custom`.
       * @example email
       * @enum {string}
       */
      source:
        | "twitter"
        | "email"
        | "phone"
        | "facebook"
        | "intercom"
        | "front_chat"
        | "custom";
    };
    ContactIds: {
      /** @description The contact IDs to include. Alternatively, you can supply the contact source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
      contact_ids: components["schemas"]["ResourceID"][];
    };
    ContactListResponses: {
      _links?: {
        /**
         * @description Link to resource
         * @example https://yourCompany.api.frontapp.com/contact_lists/grp_3j342
         */
        self?: string;
        related?: {
          /**
           * @description Link to contact list contacts
           * @example https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts
           */
          contacts?: string;
          /**
           * @description Link to list owner
           * @example https://yourCompany.api.frontapp.com/teammates/tea_e35u
           */
          owner?: string;
        };
      };
      /**
       * @description Unique identifier of the list
       * @example grp_3j342
       */
      id?: string;
      /**
       * @description Name of the list
       * @example Party Planning Committee
       */
      name?: string;
      /**
       * @description Whether or not the contact is individual
       * @example false
       */
      is_private?: boolean;
    };
    ContactNoteResponses: {
      _links: {
        related?: {
          /**
           * @description Link to the teammate who wrote the note
           * @example https://yourCompany.api.frontapp.com/teammates/tea_6r55a
           */
          author?: string;
          /**
           * @description Link to the owner of the note
           * @example https://yourCompany.api.frontapp.com/teammates/tea_e35u
           */
          owner?: string | null;
        };
      };
      /**
       * @description Teammate who wrote the note
       * @example https://yourCompany.api.frontapp.com/teammates/tea_6r55a
       */
      author: components["schemas"]["TeammateResponse"];
      /**
       * @description Content of the note
       * @example Mrs. Allen is our most important client … because every client is our most important client.
       */
      body: string;
      /**
       * @description Date at which the note have been created
       * @example 1701806790.536
       */
      created_at?: number;
    };
    ContactResponse: {
      _links?: {
        /**
         * @description Link to resource
         * @example https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge"
         */
        self?: string;
        related?: {
          /**
           * @description Link to contact notes
           * @example https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/notes
           */
          notes?: string;
          /**
           * @description Link to contact conversations
           * @example https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/conversations
           */
          conversations?: string;
          /**
           * @description Link to contact owner
           * @example null
           */
          owner?: string;
        };
      };
      /**
       * @description Unique identifier of the contact
       * @example crd_3cgz4ge
       */
      id?: string;
      /**
       * @description Contact name
       * @example Dwight Schrute
       */
      name?: string;
      /**
       * @description Contact description
       * @example Assistant to the regional manager
       */
      description?: string;
      /**
       * @description URL of the contact's avatar
       * @example https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/avatar-1673436467707
       */
      avatar_url?: string;
      /** @description List of all the links of the contact */
      links?: string[];
      /**
       * @deprecated
       * @description List of the groups the contact belongs to. ⚠️ Deprecated. use `lists` instead.
       */
      groups?: components["schemas"]["ContactListResponses"][];
      /** @description List of the contact lists the contact belongs to. */
      lists?: components["schemas"]["ContactListResponses"][];
      /** @description List of the handles and sources with which the contact is reachable. */
      handles?: components["schemas"]["ContactHandle"][];
      /** @description Custom fields for this contact. */
      custom_fields?: components["schemas"]["CustomFieldParameter"];
      /**
       * @description Whether or not the contact is individual
       * @example true
       */
      is_private?: boolean;
    };
    ConversationResponse: {
      _links: {
        /**
         * @description Link to resource
         * @example https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q
         */
        self?: string;
        related?: {
          /**
           * @description Link to conversation events
           * @example https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/events
           */
          events?: string;
          /**
           * @description Link to conversation followers
           * @example https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/followers
           */
          followers?: string;
          /**
           * @description Link to conversation messages
           * @example https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/messages
           */
          messages?: string;
          /**
           * @description Link to conversation comments
           * @example https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/comments
           */
          comments?: string;
          /**
           * @description Link to conversation inboxes
           * @example https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/inboxes
           */
          inboxes?: string;
          /**
           * @description Link to last message of the conversation
           * @example https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq?referer=conversation
           */
          last_message?: string;
        };
      };
      /**
       * @description Unique identifier of the conversation
       * @example cnv_yo1kg5q
       */
      id: string;
      /**
       * @description Subject of the message for email message
       * @example How to prank Dwight Schrute
       */
      subject: string;
      /**
       * @description Status of the conversation
       * @example assigned
       * @enum {string}
       */
      status: "archived" | "unassigned" | "deleted" | "assigned";
      /**
       * @description Unique identifier of the conversation status category, only present if ticketing is enabled
       * @example sts_5x
       */
      status_id?: string;
      /**
       * @description Status category of the conversation
       * @example resolved
       * @enum {string}
       */
      status_category?: "open" | "waiting" | "resolved";
      /**
       * @description List of ticket ids associated with the conversation
       * @example [
       *       "TICKET-1"
       *     ]
       */
      ticket_ids: string[];
      /** @description Partial representation of the teammate assigned to the conversation */
      assignee: components["schemas"]["TeammateResponse"];
      /** @description Main recipient of the conversation */
      recipient: components["schemas"]["RecipientResponse"];
      /** @description List of the tags for this conversation */
      tags: components["schemas"]["TagResponse"][];
      /** @description List of the links for this conversation */
      links: components["schemas"]["LinkResponse"][];
      /** @description Custom fields for this conversation */
      custom_fields: components["schemas"]["CustomFieldParameter"];
      /**
       * @description Timestamp at which the conversation have been created.
       * @example 1701292649.333
       */
      created_at?: number;
      /**
       * @description Timestamp of the oldest unreplied message.
       * @example 1701292649.333
       */
      waiting_since?: number;
      /**
       * @description Whether or not the conversation is private
       * @example true
       */
      is_private: boolean;
      /** @description List of scheduled (non-expired and non-canceled) reminders for this conversation */
      scheduled_reminders: components["schemas"]["Reminder"][];
      /** @description Optional metadata about the conversation */
      metadata: {
        /**
         * @description List of external_ids for partner channel associated with the conversation. Only present for partner channel token authenticated requests.
         * @example [
         *       "JS3949",
         *       "JS9403"
         *     ]
         */
        external_conversation_ids?: string[];
      };
    };
    CreateChannel: {
      /** @description Name of the channel */
      name?: string;
      /** @description Settings of the channel */
      settings?: {
        /**
         * @description The time (measured in seconds) that users have to undo a send operation in the channel.
         * @enum {integer}
         */
        undo_send_time?: 0 | 5 | 10 | 15 | 30 | 60;
        /** @description Whether teammates without inbox access can reply on this channel. Only allowed for shared channels. */
        all_teammates_can_reply?: boolean;
        /** @description The webhook URL outbound messages should be sent to. Only allowed for "custom" type channels. */
        webhook_url?: string;
        /** @description The SID of the Twilio channel. Only allowed for "twilio" type channels. */
        sid?: string;
        /** @description The auth token for the Twilio account. Only allowed for "twilio" type channels. */
        auth_token?: string;
      };
      /**
       * @description Type of the channel
       * @enum {string}
       */
      type: "custom" | "smtp" | "twilio";
      /** @description Sending address of your channel. Required for SMTP and Twilio channels. */
      send_as?: string;
    };
    CreateComment: {
      /** @description ID of the teammate creating the comment. Alternatively, you can supply the author as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). If omitted, will post as the API Token or OAuth client of the requester. */
      author_id?: string;
      /** @description Content of the comment. Can include markdown formatting. */
      body: string;
      /** @description Whether or not the comment is pinned in its conversation. */
      is_pinned?: boolean;
      /** @description Binary data of attached files. Must use `Content-Type: multipart/form-data` if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb) or read more about [Attachments](https://dev.frontapp.com/docs/attachments-1).  Max 25 MB. */
      attachments?: string[];
    };
    CreateContact: components["schemas"]["Contact"] & {
      /** @description List of the handles for this contact. Each handle object should include `handle` and `source` fields. */
      handles: components["schemas"]["ContactHandle"][];
    };
    CreateContactList: {
      /** @description Name of the contact list */
      name: string;
    };
    CreateContactNote: {
      /** @description ID of teammate creating the note */
      author_id: string;
      /** @description Content of the note */
      body: string;
    };
    CreateConversation: {
      /**
       * @description Conversation type
       * @enum {string}
       */
      type: "discussion";
      /** @description Inbox ID for the conversation. Either `inbox_id` OR `teammate_ids` must be provided (not both). */
      inbox_id?: string;
      /** @description Teammates to add to the conversation. Either `inbox_id` OR `teammate_ids` must be provided (not both). */
      teammate_ids?: string[];
      /** @description Subject of the conversation */
      subject: string;
      /** @description Details for the starter comment */
      comment: {
        /** @description ID of the teammate creating the comment. If omitted, will post as the API Token or OAuth client of the requester. */
        author_id?: string;
        /** @description Content of the comment */
        body: string;
        /** @description Binary data of attached files. Must use `Content-Type: multipart/form-data` if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb) or read more about [Attachments](https://dev.frontapp.com/docs/attachments-1). */
        attachments?: string[];
      };
      /** @description Custom fields for this conversation */
      custom_fields?: components["schemas"]["CustomFieldParameter"];
    };
    CreateDraft: {
      /** @description ID of the teammate on behalf of whom the draft will be created. Alternatively, you can supply the author ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). If omitted, will post as the API Token or Application making the request. */
      author_id?: string;
      /** @description List of recipient handles who will receive the message once the draft is sent */
      to?: string[];
      /** @description List of recipient handles who will receive a copy of the message once the draft is sent */
      cc?: string[];
      /** @description List of the recipient handles who will receive a blind copy of the message once the draft is sent */
      bcc?: string[];
      /** @description Subject of the draft. */
      subject?: string;
      /** @description Body of the draft */
      body: string;
      /** @description Body for the quote that the message is referencing. Only available on email channels. */
      quote_body?: string;
      /** @description Binary data of attached files. Must use `Content-Type: multipart/form-data` if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb) or read more about [Attachments](https://dev.frontapp.com/docs/attachments-1). Max 25 MB. */
      attachments?: string[];
      /**
       * @description Mode of the draft to create. Can be 'private' (draft is visible to the author only) or 'shared' (draft is visible to all teammates with access to the conversation).
       * @default private
       * @enum {string}
       */
      mode: "private" | "shared";
      /** @description ID of the signature to attach to this draft. If null, no signature is attached. */
      signature_id?: string;
      /** @description Whether or not Front should try to resolve a signature for the message. Is ignored if signature_id is included. Default false; */
      should_add_default_signature?: boolean;
    };
    CreateInbox: {
      /** @description The name of the inbox */
      name: string;
      /** @description An array of teammate IDs that should have access to the inbox. Alternatively, you can supply teammate emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
      teammate_ids?: components["schemas"]["ResourceID"][];
    };
    /** @description A link is used to connect a Front conversation to an external resource. */
    CreateLink: {
      /** @description Name of the link. If none is specified, the external_url is used as a default */
      name?: string;
      /** @description Underlying identifying url of the link */
      external_url?: string;
      /**
       * @description The string that application object configurations will match on to update a specific application object. For example, if you've configured an application object to match on ORDER-{Digits}, and you want to specifically update the application objects for ORDER-777 to retrieve the latest information from external systems, send "ORDER-777". Repeat for other specific identifiers, such as "ORDER-435".
       * @example ORDER-123
       */
      pattern?: string;
    };
    /** @description A message template that is used for pre-written responses */
    CreateMessageTemplateAsChild: {
      /**
       * @description Name of the message template
       * @example Out of Office
       */
      name: string;
      /**
       * @description Subject of the message template.
       * @example Out of Office
       */
      subject?: string;
      /**
       * @description Body of the message template. You can supply HTML with inline CSS to structure and style your template.
       * @example <p>Sorry, I'm OOO until <span style="color: green;">October 25th</span>.</p>
       *
       */
      body: string;
      /**
       * @description The specific inboxes this template is available in. If unspecified or null, then it will be available in all inboxes. Array should be non-empty.
       * @example null
       */
      inbox_ids?: string[];
    };
    /** @description A message template folder that is used to store message templates or other folders. */
    CreateMessageTemplateFolder: {
      /**
       * @description Name of the message template folder
       * @example PTO templates
       */
      name: string;
      /**
       * @description ID of the parent folder to be placed into. Goes into the root folder if unspecified or if null.
       * @example null
       */
      parent_folder_id?: string;
    };
    /** @description A message template folder that is used to store message templates or other folders. */
    CreateMessageTemplateFolderAsChild: {
      /**
       * @description Name of the message template folder
       * @example PTO templates
       */
      name: string;
    };
    /** @description A message template that is used for pre-written responses */
    CreatePrivateMessageTemplate: {
      /**
       * @description Name of the message template
       * @example Out of Office
       */
      name: string;
      /**
       * @description Subject of the message template.
       * @example Out of Office
       */
      subject?: string;
      /**
       * @description Body of the message template. You can supply HTML with inline CSS to structure and style your template.
       * @example <p>Sorry, I'm OOO until <span style="color: green;">October 25th</span>.</p>
       *
       */
      body: string;
      /**
       * @description ID of the message template folder to place this message template in
       * @example null
       */
      folder_id?: string;
    };
    /** @description A signature that can be used to sign messages. */
    CreatePrivateSignature: {
      /** @description Name of the signature */
      name: string;
      /** @description Sender info of the signature that will appear in the From line of emails sent. */
      sender_info?: string;
      /** @description Body of the signature */
      body: string;
      /**
       * @description If true, the signature will be set as the default signature for the teammate.
       * @default false
       */
      is_default: boolean;
      /** @description The specific channels this signature is available in. If omitted or null, the signature will be available in all channels the teammate has access to. Alternatively, you can specify channels using a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
      channel_ids?: string[];
    };
    /** @description A message template that is used for pre-written responses */
    CreateSharedMessageTemplate: {
      /**
       * @description Name of the message template
       * @example Out of Office
       */
      name: string;
      /**
       * @description Subject of the message template.
       * @example Out of Office
       */
      subject?: string;
      /**
       * @description Body of the message template. You can supply HTML with inline CSS to structure and style your template.
       * @example <p>Sorry, I'm OOO until <span style="color: green;">October 25th</span>.</p>
       *
       */
      body: string;
      /**
       * @description ID of the message template folder to place this message template in
       * @example null
       */
      folder_id?: string;
      /**
       * @description The specific inboxes this template is available in. If unspecified or null, then it will be available in all inboxes. Array should be non-empty.
       * @example null
       */
      inbox_ids?: string[];
      /** @description Binary data of attached files. Must use `Content-Type: multipart/form-data` if specified. See [example](https://dev.frontapp.com/docs/attachments-1).  Max 25 MB. */
      attachments?: string[];
    };
    /** @description A signature that can be used to sign messages. */
    CreateSharedSignature: {
      /** @description Name of the signature */
      name: string;
      /** @description Sender info of the signature that will appear in the From line of emails sent. */
      sender_info?: string;
      /** @description Body of the signature */
      body: string;
      /** @description Whether or not the signature is visible in all individual channels for teammates in the given team. */
      is_visible_for_all_teammate_channels?: boolean;
      /**
       * @description If true, the signature will be set as the default signature for the team.
       * @default false
       */
      is_default: boolean;
      /** @description The specific channels this signature is available in. If omitted or null, the signature will be available in all channels the team has access to. Alternatively, you can specify channels using a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
      channel_ids?: string[];
    };
    CreateShift: {
      /** @description Name of the shift */
      name: string;
      /**
       * @description Color of the shift
       * @enum {string}
       */
      color:
        | "black"
        | "grey"
        | "pink"
        | "purple"
        | "blue"
        | "teal"
        | "green"
        | "yellow"
        | "orange"
        | "red";
      /** @description A timezone name as defined in the IANA tz database */
      timezone: string;
      /** @description The shift intervals per day of the week */
      times: components["schemas"]["ShiftIntervals"];
      /** @description List of all the teammate ids who will be part of this shift. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
      teammate_ids: components["schemas"]["ResourceID"][];
    };
    /** @description A tag is a label that can be used to classify conversations. */
    CreateTag: {
      /** @description Name of the tag */
      name: string;
      /** @description Description of the tag */
      description?: string;
      /**
       * @description Highlight color of the tag.
       * @enum {string}
       */
      highlight?:
        | "grey"
        | "pink"
        | "red"
        | "orange"
        | "yellow"
        | "green"
        | "light-blue"
        | "blue"
        | "purple";
      /**
       * @description Whether the tag is visible in conversation lists.
       * @default false
       */
      is_visible_in_conversation_lists: boolean;
    };
    CreateTeammateGroup: {
      /** @description Name of the teammate group */
      name: string;
      /** @description Description of the teammate group */
      description?: string;
      /** @description Permissions for the teammate group */
      permissions?: {
        /** @description Permissions for accessing contact lists. This only applies if shared contacts permissions are enabled. */
        contacts?: {
          /** @description One of 'all', 'contact_groups', 'contact_lists', or 'none'. */
          access: string;
          /**
           * @deprecated
           * @description List of contact group ids. Can only be specified if access is set to 'contact_groups'. ⚠️ Deprecated. Use access 'contact_lists' and 'contact_list_ids' instead.
           */
          contact_group_ids?: string[];
          /** @description List of contact list ids. Can only be specified if access is set to 'contact_lists'. */
          contact_list_ids?: string[];
        };
      };
    };
    /**
     * @description An object whose key is the `name` property defined for the custom field in the Front UI. The value of the key must use the same `type` specified for the custom field, as described in https://dev.frontapp.com/reference/custom-fields
     * @example {
     *       "city": "London, UK",
     *       "isVIP": true,
     *       "renewal_date": 1525417200,
     *       "sla_time": 90,
     *       "owner": "leela@planet-express.com",
     *       "replyTo": "inb_55c8c149",
     *       "Job Title": "firefighter"
     *     }
     */
    CustomFieldParameter: Record<string, never>;
    CustomFieldResponse: {
      _links: {
        /**
         * @description Link to resource
         * @example https://yourCompany.api.frontapp.com/custom_fields/fld_co0e
         */
        self?: string;
      };
      /**
       * @description Unique identifier of the custom field
       * @example fld_co0e
       */
      id: string;
      /**
       * @description Name of the custom field
       * @example Customer plan
       */
      name: string;
      /**
       * @description Description of the custom field
       * @example The billing plan of the customer
       */
      description: string;
      /**
       * @description Type of the custom field
       * @example enum
       * @enum {string}
       */
      type:
        | "string"
        | "boolean"
        | "datetime"
        | "number"
        | "teammate"
        | "inbox"
        | "enum";
      /** @description List of possible values for a custom field of type `enum`. */
      values?: {
        /**
         * @description Value of the custom field
         * @example Enterprise
         */
        value?: string;
        /**
         * @description Human readable label for the value
         * @example Customer plan
         */
        label?: string;
      }[];
    };
    CustomMessage: {
      /** @description Data of the sender */
      sender: {
        /** @description ID of the contact in Front corresponding to the sender */
        contact_id?: string;
        /** @description Name of the sender */
        name?: string;
        /** @description Handle of the sender. It can be any string used to uniquely identify the sender. **Important:** When sending a phone number, include a country code preceded by a plus (+) sign. For example, +33 for France. If you do not send a country code or include a plus sign, Front will normalize your phone number to the USA (+1). */
        handle: string;
      };
      /** @description Subject of the message */
      subject?: string;
      /** @description Body of the message */
      body: string;
      /**
       * @description Format of the message body. Can be `markdown` (default) or `html`.
       * @default markdown
       * @enum {string}
       */
      body_format: "html" | "markdown";
      metadata?: {
        /** @description Reference which will be used to thread messages. If omitted, Front threads by sender instead. This reference is unique to custom channels. If you supply a reference generated by another endpoint, the message will not thread into the same conversation. */
        thread_ref?: string;
        /** @description Custom object where any internal information can be stored */
        headers?: Record<string, never>;
      };
      /** @description Binary data of attached files. Must use `Content-Type: multipart/form-data` if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb) or read more about [Attachments](https://dev.frontapp.com/docs/attachments-1).  Max 25 MB. */
      attachments?: string[];
    };
    DeleteContactHandle: components["schemas"]["ContactHandle"] & {
      /**
       * @description Force the deletetion of the contact if the handle is the last one
       * @default false
       */
      force: boolean;
    };
    DeleteDraft: {
      /** @description Version of the draft */
      version: string;
    };
    EditDraft: components["schemas"]["ReplyDraft"] & {
      /** @description Version of the draft */
      version?: string;
      /**
       * @description Mode of the draft to update. Can only be 'shared' (draft is visible to all teammates with access to the conversation).
       * @enum {string}
       */
      mode?: "shared";
    };
    /** @description An event is created every time something interesting is happening in Front. */
    EventResponse: {
      _links?: {
        /**
         * @description Link to resource
         * @example https://yourCompany.api.frontapp.com/events/evt_4ckcra8e
         */
        self?: string;
      };
      /**
       * @description Unique identifier of the event
       * @example evt_4ckcra8e
       */
      id?: string;
      /**
       * @description Type of event
       * @example inbound
       * @enum {string}
       */
      type?:
        | "assign"
        | "unassign"
        | "archive"
        | "reopen"
        | "trash"
        | "restore"
        | "reminder"
        | "comment"
        | "mention"
        | "inbound"
        | "outbound"
        | "out_reply"
        | "move"
        | "forward"
        | "tag"
        | "untag"
        | "sending_error"
        | "message_bounce_error"
        | "conversations_merged"
        | "link_added"
        | "link_removed"
        | "custom_field_updated"
        | "macro_triggered"
        | "topic_identified"
        | "ticket_status_update";
      /**
       * @description Date at which the event has been emitted
       * @example 1703102616
       */
      emitted_at?: number;
      /** @description Event source */
      source?: {
        /** @description Metadata about the resource */
        _meta?: {
          /**
           * @description Type of resource
           * @example inboxes
           * @enum {unknown}
           */
          type?:
            | "api"
            | "oauth_client"
            | "rule"
            | "teammate"
            | "imap"
            | "gmail"
            | "reminder"
            | "inboxes"
            | "recipient";
        };
        /** @description The resource which triggered the event */
        data?:
          | components["schemas"]["RuleResponse"]
          | components["schemas"]["TeammateResponse"]
          | components["schemas"]["InboxResponse"][];
      };
      /** @description Partial representation (type & id) of the event's target */
      target?: {
        /** @description Metadata about the resource */
        _meta?: {
          /**
           * @description Type of resource
           * @example inboxes
           * @enum {unknown}
           */
          type?:
            | "teammate"
            | "inboxes"
            | "message"
            | "comment"
            | "tag"
            | "deleted_conversation_ids"
            | "link"
            | "custom_field";
        };
        /** @description The resource which received the event */
        data?:
          | components["schemas"]["TeammateResponse"]
          | components["schemas"]["InboxResponse"]
          | components["schemas"]["TagResponse"]
          | components["schemas"]["CommentResponse"]
          | components["schemas"]["MessageResponse"]
          | components["schemas"]["LinkResponse"];
      };
      /** @description The conversation on which the event happened */
      conversation?: components["schemas"]["ConversationResponse"];
    };
    IdentityResponse: {
      _links: {
        /**
         * @description Link to resource
         * @example https://yourCompany.api.frontapp.com/me
         */
        self?: string;
      };
      /**
       * @description Unique ID of company
       * @example cmp_k30
       */
      id: string;
      /**
       * @description Name of company
       * @example Dunder Mifflin Paper Company, Inc.
       */
      name: string;
    };
    ImportMessage: {
      /** @description Data of the sender */
      sender: {
        /** @description ID of the teammate who is the author of the message. Ignored if the message is inbound. */
        author_id?: string;
        /** @description Name of the sender */
        name?: string;
        /** @description Handle of the sender. It can be any string used to uniquely identify the sender. **Important:** When sending a phone number, include a country code preceded by a plus (+) sign. For example, +33 for France. If you do not send a country code or include a plus sign, Front will normalize your phone number to the USA (+1). */
        handle: string;
      };
      /** @description List of the recipient handles who will receive this message */
      to: string[];
      /** @description List of the recipient handles who will receive a copy of this message */
      cc?: string[];
      /** @description List of the recipient handles who will receive a blind copy of this message */
      bcc?: string[];
      /** @description Subject of the message */
      subject?: string;
      /** @description Body of the message */
      body: string;
      /**
       * @description Format of the message body. Can be `markdown` (default) or `html`, and can only be specified for `email` type.
       * @default markdown
       * @enum {string}
       */
      body_format: "html" | "markdown";
      /** @description External identifier of the message. Front won't import two messages with the same external ID. */
      external_id: string;
      /** @description Date at which the message as been sent or received. */
      created_at: number;
      /**
       * @description Type of the message to import. Default is `email`.
       * @default email
       * @enum {string}
       */
      type: "email" | "sms" | "intercom" | "custom";
      /** @description ID of the teammate who will be assigned to the conversation. */
      assignee_id?: string;
      /** @description List of tag names to add to the conversation */
      tags?: string[];
      /** @description If supplied, Front will thread this message into conversation with the given ID. Note that including this parameter nullifies the `thread_ref` parameter _completely_. */
      conversation_id?: string;
      metadata: {
        /** @description Reference which will be used to thread messages. If omitted, Front threads by sender instead. This reference is unique to importing historical messages. If you supply a reference generated by another endpoint, the message will not thread into the same conversation. */
        thread_ref?: string;
        /** @description Determines if message is received (inbound) or sent (outbound) by you. */
        is_inbound: boolean;
        /**
         * @description Determines if message is archived after import.
         * @default true
         */
        is_archived: boolean;
        /**
         * @description Determines if rules should be skipped. `true` by default.
         * @default true
         */
        should_skip_rules: boolean;
      };
      /** @description Binary data of attached files. Must use `Content-Type: multipart/form-data` if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb) or read more about [Attachments](https://dev.frontapp.com/docs/attachments-1).  Max 25 MB. */
      attachments?: string[];
    };
    InboxIds: {
      inbox_ids: components["schemas"]["ResourceID"][];
    };
    InboxResponse: {
      _links?: {
        /**
         * @description Link to resource
         * @example https://yourCompany.api.frontapp.com/inboxes/inb_1ix6
         */
        self?: string;
        related?: {
          /**
           * @description Link to inbox teammates
           * @example https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/teammates
           */
          teammates?: string;
          /**
           * @description Link to inbox conversations
           * @example https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/conversations
           */
          conversations?: string;
          /**
           * @description Link to inbox channels
           * @example https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/channels
           */
          channels?: string;
          /**
           * @description Link to inbox owner
           * @example https://yourCompany.api.frontapp.com/teams/tim_k30
           */
          owner?: string;
        };
      };
      /**
       * @description Unique identifier for the inbox
       * @example inb_1ix6
       */
      id?: string;
      /**
       * @description Name of the inbox
       * @example The Dundies
       */
      name?: string;
      /**
       * @description Whether or not the inbox is individual
       * @example false
       */
      is_private?: boolean;
      /**
       * @description Whether or not the inbox is available to all members of a team by default
       * @example true
       */
      is_public?: boolean;
      /** @description Custom fields for this inbox */
      custom_fields?: components["schemas"]["CustomFieldParameter"];
    };
    KnowledgeBaseArticleCreate: {
      /** @description ID of the category this article belongs to */
      category_id?: string;
      /** @description Teammate ID of the article author */
      author_id?: string;
      /** @description Subject of the article */
      subject?: string;
      /** @description HTML content of the article */
      content?: string;
      /**
       * @description Article status
       * @default draft
       * @enum {string}
       */
      status: "draft" | "published";
    };
    KnowledgeBaseArticlePatch: {
      /** @description Teammate ID of the article author */
      author_id?: string;
      /** @description Subject of the article */
      subject?: string;
      /** @description HTML content of the article */
      content?: string;
      /**
       * @description Article status
       * @default draft
       * @enum {string}
       */
      status: "draft" | "published";
    };
    KnowledgeBaseArticleResponse: {
      _links: {
        /**
         * @description Link to resource
         * @example https://yourCompany.api.frontapp.com/knowledge_base_articles/kba_12
         */
        self?: string;
        related?: {
          /**
           * @description Link to the article's knowledge base
           * @example https://yourCompany.api.frontapp.com/knowledge_bases/knb_12
           */
          knowledge_base?: string;
          /**
           * @description Link to the article's category
           * @example https://yourCompany.api.frontapp.com/knowledge_base_category/kbc_12
           */
          category?: string;
          /**
           * @description Link to the article's last editor
           * @example https://yourCompany.api.frontapp.com/teammates/tea_6r55a
           */
          last_editor?: string;
        };
      };
      /**
       * @description Unique identifier of the knowledge base article
       * @example kba_12
       */
      id: string;
      /**
       * @description URL slug of the article. Construct the full URL using the template of protocol/knowledge base domain/locale/slug, such as https://yourDomain.com/en/articles/5
       * @example /articles/5
       */
      slug: string;
      /**
       * @description Name of the article
       * @example Billing 101
       */
      name: string;
      /**
       * @description Status of the article
       * @example published
       */
      status: string;
      /** @description Article keywords */
      keywords: string[];
      /**
       * @description Article HTML content
       * @example <h1>How to process a return</h1><p>To process a return...</p>
       */
      content: string;
      /**
       * @description Locale of the article
       * @example en
       */
      locale: string;
      /** @description List of files attached to the article */
      attachments: components["schemas"]["Attachment"][];
      /**
       * @description Timestamp when the article was last edited
       * @example 1622672452.363
       */
      last_edited_at?: number;
      /**
       * @description Timestamp when the article was created
       * @example 1622672452.363
       */
      created_at?: number;
      /**
       * @description Timestamp when the article was updated
       * @example 1654309308.278
       */
      updated_at?: number;
    };
    KnowledgeBaseArticleSlimResponse: {
      _links: {
        /**
         * @description Link to resource
         * @example https://yourCompany.api.frontapp.com/knowledge_base_articles/kba_12
         */
        self?: string;
        related?: {
          /**
           * @description Link to the article's knowledge base
           * @example https://yourCompany.api.frontapp.com/knowledge_bases/knb_12
           */
          knowledge_base?: string;
          /**
           * @description Link to the article's category
           * @example https://yourCompany.api.frontapp.com/knowledge_base_category/kbc_12
           */
          category?: string | null;
          /**
           * @description Link to the article's content
           * @example https://yourCompany.api.frontapp.com/knowledge_base_articles/kba_12/content
           */
          content?: string;
        };
      };
      /**
       * @description Unique identifier of the knowledge base article
       * @example kba_12
       */
      id: string;
      /**
       * @description URL slug of the article. Construct the full URL using the template of protocol/knowledge base domain/locale/slug, such as https://yourDomain.com/en/articles/5
       * @example /articles/5
       */
      slug: string;
      /** @description List of the locales the article supports */
      locales: string[];
      /**
       * @description Timestamp when the article was created
       * @example 1622672452.363
       */
      created_at?: number;
      /**
       * @description Timestamp when the article was updated
       * @example 1654309308.278
       */
      updated_at?: number;
    };
    KnowledgeBaseCategoryCreate: {
      /** @description ID of the parent category */
      parent_category_id?: string;
      /** @description Name of the knowledge base category */
      name: string;
      /** @description Description of the knowledge base category */
      description?: string;
    };
    KnowledgeBaseCategoryPatch: {
      /** @description Name of the knowledge base category */
      name?: string;
      /** @description Description of the knowledge base category */
      description?: string;
    };
    KnowledgeBaseCategoryResponse: {
      _links: {
        /**
         * @description Link to resource
         * @example https://yourCompany.api.frontapp.com/knowledge_base_categories/kbc_12
         */
        self?: string;
        related?: {
          /**
           * @description Link to the category's knowledge base
           * @example https://yourCompany.api.frontapp.com/knowledge_bases/knb_12
           */
          knowledge_base?: string;
          /**
           * @description Link to the category's parent
           * @example https://yourCompany.api.frontapp.com/knowledge_base_catgories/kbc_10
           */
          parent_category?: string | null;
          /**
           * @description Link to articles in this category
           * @example https://yourCompany.api.frontapp.com/knowledge_base_categories/kbc_12/articles
           */
          articles?: string;
        };
      };
      /**
       * @description Unique identifier of the knowledge base category
       * @example kbc_12
       */
      id: string;
      /**
       * @description Category name
       * @example Getting started
       */
      name: string | null;
      /**
       * @description Description of the category
       * @example How to get started in Front
       */
      description: string | null;
      /**
       * @description Is the category hidden
       * @example false
       */
      is_hidden: boolean;
      /**
       * @description Locale of this category
       * @example en
       * @enum {string}
       */
      locale: "fr" | "en";
      /**
       * @description Timestamp when the category was created
       * @example 1622672452.363
       */
      created_at?: number;
      /**
       * @description Timestamp when the category was updated
       * @example 1654309308.278
       */
      updated_at?: number;
    };
    KnowledgeBaseCategorySlimResponse: {
      _links: {
        /**
         * @description Link to resource
         * @example https://yourCompany.api.frontapp.com/knowledge_base_categories/kbc_12
         */
        self?: string;
        related?: {
          /**
           * @description Link to the category's knowledge base
           * @example https://yourCompany.api.frontapp.com/knowledge_bases/knb_12
           */
          knowledge_base?: string;
          /**
           * @description Link to the category's parent
           * @example https://yourCompany.api.frontapp.com/knowledge_base_catgories/kbc_10
           */
          parent_category?: string | null;
          /**
           * @description Link to articles in this category
           * @example https://yourCompany.api.frontapp.com/knowledge_base_categories/kbc_12/articles
           */
          articles?: string;
        };
      };
      /**
       * @description Unique identifier of the knowledge base category
       * @example kbc_12
       */
      id: string;
      /**
       * @description URL slug of the category. Construct the full URL using the template of protocol/knowledge base domain/locale/slug, such as https://yourDomain.com/en/categories/2
       * @example /categories/2
       */
      slug: string;
      /**
       * @description Is the category hidden from navigation and breadcrumbs (topics are accessed as direct links)
       * @example false
       */
      is_hidden: boolean;
      /** @description List of the locales the category supports */
      locales: string[];
      /**
       * @description Timestamp when the category was created
       * @example 1622672452.363
       */
      created_at?: number;
      /**
       * @description Timestamp when the category was updated
       * @example 1654309308.278
       */
      updated_at?: number;
    };
    KnowledgeBaseCreate: {
      /** @description Name of the knowledge base */
      name: string;
      /**
       * @description Determines if the knowledge base is publicly available or private only to your company
       * @default external
       * @example internal
       * @enum {string}
       */
      type: "internal" | "external";
    };
    KnowledgeBasePatch: {
      /** @description Name of the knowledge base */
      name?: string;
    };
    KnowledgeBaseResponse: {
      _links: {
        /**
         * @description Link to resource
         * @example https://yourCompany.api.frontapp.com/knowledge_bases/knb_12
         */
        self?: string;
        related?: {
          /**
           * @description Link to articles associated to the knowledge base
           * @example https://yourCompany.api.frontapp.com/knowledge_bases/knb_12/articles
           */
          articles?: string;
          /**
           * @description Link to categories associated to the knowledge base
           * @example https://yourCompany.api.frontapp.com/knowledge_bases/knb_12/categories
           */
          categories?: string;
        };
      };
      /**
       * @description Unique identifier of the knowledge base
       * @example knb_12
       */
      id: string;
      /**
       * @description Knowledge base name
       * @example Company Help Center
       */
      name: string;
      /**
       * @description Status of the KB
       * @example unpublished
       * @enum {string}
       */
      status: "published" | "unpublished";
      /**
       * @description Type of the KB
       * @example internal
       * @enum {string}
       */
      type: "internal" | "external";
      /**
       * @description Locale of this requested KB
       * @example en
       * @enum {string}
       */
      locale: "fr" | "en";
      /**
       * @description Timestamp when the knowledge base was created
       * @example 1622672452.363
       */
      created_at?: number;
      /**
       * @description Timestamp when the knowledge base was updated
       * @example 1654309308.278
       */
      updated_at?: number;
    };
    KnowledgeBaseSlimResponse: {
      _links: {
        /**
         * @description Link to resource
         * @example https://yourCompany.api.frontapp.com/knowledge_bases/knb_12
         */
        self?: string;
        related?: {
          /**
           * @description Link to articles associated to the knowledge base
           * @example https://yourCompany.api.frontapp.com/knowledge_bases/knb_12/articles
           */
          articles?: string;
          /**
           * @description Link to categories associated to the knowledge base
           * @example https://yourCompany.api.frontapp.com/knowledge_bases/knb_12/categories
           */
          categories?: string;
        };
      };
      /**
       * @description Unique identifier of the knowledge base
       * @example knb_12
       */
      id: string;
      /**
       * @description Type of the KB
       * @example internal
       * @enum {string}
       */
      type: "internal" | "external";
      /** @description List of the KB's possible locales */
      locales: string[];
      /**
       * @description Timestamp when the knowledge base was created
       * @example 1622672452.363
       */
      created_at?: number;
      /**
       * @description Timestamp when the knowledge base was updated
       * @example 1654309308.278
       */
      updated_at?: number;
    };
    /** @description A link used to connect a Front conversation to an external resource. */
    LinkResponse: {
      _links: {
        /**
         * @description Link to resource
         * @example https://yourCompany.api.frontapp.com/links/top_b2wpa
         */
        self?: string;
      };
      /**
       * @description Unique identifier of the link
       * @example top_b2wpa
       */
      id: string;
      /**
       * @description Display name of the link
       * @example JIRA-SCRAN-4567
       */
      name: string;
      /**
       * @description Type of the link. Typically associated with the underlying link provider (if known)
       * @example app_2f76b9ac738de158
       */
      type: string;
      /**
       * @description Underlying identifying external URL of the link
       * @example https://dundermifflin.atlassian.net/browse/PB-SCRAN-4567
       */
      external_url: string;
      /** @description Custom fields for this link */
      custom_fields: components["schemas"]["CustomFieldParameter"];
    };
    MergeContacts: {
      /** @description Optional contact ID to merge the other contacts into. */
      target_contact_id?: string;
      /** @description Array of all the contact IDs of the contacts to be merged.  If a target contact id is provided and that contact id is not in this array, the length of this array must be between 1 and 49.  If no target contact id is provided or it is contained in this array, the length must be between 2 and 50. */
      contact_ids: string[];
    };
    MessageResponse: {
      _links?: {
        /**
         * @description Link to resource
         * @example https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq
         */
        self?: string;
        related?: {
          /**
           * @description Link to message conversation
           * @example https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q
           */
          conversation?: string;
          /**
           * @description Link to message this message replied to
           * @example https://yourCompany.api.frontapp.com/messages/msg_2y67qldq
           */
          message_replied_to?: string;
          /**
           * @description Link to message seen information
           * @example https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq/seen
           */
          message_seen?: string;
        };
      };
      /**
       * @description Unique identifier of the message
       * @example msg_1q15qmtq
       */
      id?: string;
      /**
       * @description Secondary unique identifier of a message. Generated by Front on message creation. Learn more at about the [message UID](https://dev.frontapp.com/reference/messages#creating-a-new-message).
       * @example 1eab543f84a0785f7b6b8967cck18f4d
       */
      message_uid?: string;
      /**
       * @description Type of the message
       * @example email
       * @enum {string}
       */
      type?:
        | "call"
        | "custom"
        | "email"
        | "facebook"
        | "front_chat"
        | "googleplay"
        | "intercom"
        | "internal"
        | "phone-call"
        | "sms"
        | "tweet"
        | "tweet_dm"
        | "whatsapp"
        | "yalo_wha";
      /**
       * @description Whether or not the message has been received or sent
       * @example false
       */
      is_inbound?: boolean;
      /**
       * @description If the message is a draft, describes the draft mode. Can be 'private' (draft is visible to the author only) or 'shared' (draft is visible to all teammates with access to the conversation).
       * @example shared
       * @enum {string|null}
       */
      draft_mode?: "shared" | "private" | null;
      /**
       * @description Type of the error when the draft failed to be sent
       * @example null
       */
      error_type?: string;
      /**
       * @description The current version of the message in Front
       * @example 551ba368f3e7803cce51503ee3e58ef0-26028-1701804863304-945c
       */
      version?: string;
      /**
       * @description Date at which the message as been sent or received
       * @example 1701292639
       */
      created_at?: number;
      /**
       * @description Subject of the message
       * @example Jim's pranks are getting out of hand
       */
      subject?: string;
      /**
       * @description Preview of the message body
       * @example It's high time we discuss the pranking culture in the office
       */
      blurb?: string;
      /** @description Front teammate who sent this message */
      author?: components["schemas"]["TeammateResponse"];
      recipients?: components["schemas"]["RecipientResponse"][];
      /**
       * @description Body of the message
       * @example <p>Hi there,</p><p>I wanted to let you know that I'm suggesting an update to <a href='https://dundermifflin.com/privacy/pranks'>Dunder Mifflin's Pranking Policy</a> to provide non-humorous employees greater control over their well-being in the office.</p>
       */
      body?: string;
      /**
       * @description Text version of the body for email messages
       * @example Hi there,\n\nI wanted to let you know that I'm suggesting an update to Dunder Mifflin's Pranking Policy (https://dundermifflin.com/privacy/pranks) to provide non-humorous employees greater control over their well-being in the office.
       */
      text?: string;
      /** @description List of files attached to the message */
      attachments?: components["schemas"]["Attachment"][];
      /** @description The signature attached to this message */
      signature?: components["schemas"]["SignatureResponse"];
      /** @description Optional metadata about the message */
      metadata?: {
        /**
         * @description For `intercom` messages only. URL of the Intercom conversation the message is coming from.
         * @example http://intercom.com
         */
        intercom_url?: string;
        /**
         * @description For `truly-call` messages only. Length of the call in seconds.
         * @example 189
         */
        duration?: number;
        /**
         * @description For `truly-call` messages only. Whether or not the call have been answered.
         * @example false
         */
        have_been_answered?: boolean;
        /**
         * @description For `tweet` or 'custom' (partner channel token authenticated) messages only. Unique message identifier in the underlying provider (Twitter or Partner). For custom messages, only present for partner channel token authenticated requests.
         * @example dkd84992kduo903
         */
        external_id?: string;
        /**
         * @description For `tweet` messages only. URL of the tweet.
         * @example https://twitter.com
         */
        twitter_url?: string;
        /**
         * @description For `tweet` messages only. Whether or not the tweet is a retweet.
         * @example true
         */
        is_retweet?: boolean;
        /**
         * @description For `tweet` messages only. Whether or not the tweet have been retweeted.
         * @example true
         */
        have_been_retweeted?: boolean;
        /**
         * @description For `tweet` messages only. Whether or not the tweet have been favorited.
         * @example false
         */
        have_been_favorited?: boolean;
        /**
         * @description For `custom` messages only. Custom reference which is used to thread messages.
         * @example t0930k9000-394
         */
        thread_ref?: string;
        /** @description For `custom` messages only. Custom object holding internal information. */
        headers?: Record<string, never>;
        /**
         * @description For `front_chat` messages only. Source URL from the chat widget when sending a message.
         * @example https://yourCompany.com/products
         */
        chat_visitor_url?: string;
      };
    };
    MessageTemplateFolderResponse: {
      _links: {
        /**
         * @description Link to resource
         * @example https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2
         */
        self?: string;
        related?: {
          /**
           * @description Link to resource's owner. Null if the current folder does not have an owner.
           * @example https://yourCompany.api.frontapp.com/teams/tim_s47
           */
          owner?: string | null;
          /**
           * @description Link to parent folder. Null if the current folder does not have a parent.
           * @example https://yourCompany.api.frontapp.com/message_template_folders/rsf_g1
           */
          parent_folder?: string | null;
          /**
           * @description Link to child folders. Null if the current folder does not have children.
           * @example https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2/message_template_folders
           */
          child_folders?: string | null;
          /**
           * @description Link to message templates contained within this folder or children folders. Null if the current folder does not have any message templates.
           * @example https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2/message_templates
           */
          child_answers?: string | null;
        };
      };
      /**
       * @description Unique identifier of the message template folder
       * @example rsf_g2
       */
      id: string;
      /**
       * @description Name of the message template folder
       * @example Complaints to Toby (or about Toby)
       */
      name: string;
      /**
       * @description Timestamp at which the message template folder was created.
       * @example 1680300342.904
       */
      created_at?: number;
      /**
       * @description Timestamp at which the message template folder was updated.
       * @example 1688668654.501
       */
      updated_at?: number;
    };
    MessageTemplateResponse: {
      _links: {
        /**
         * @description Link to resource
         * @example https://yourCompany.api.frontapp.com/responses/rsp_16yc
         */
        self?: string;
        related?: {
          /**
           * @description Link to resource's owner
           * @example https://yourCompany.api.frontapp.com/teams/tim_s47
           */
          owner?: string | null;
          /**
           * @description Link to the parent folder that contains the message template
           * @example https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2
           */
          parent_folder?: string | null;
        };
      };
      /**
       * @description Unique identifier of the message template
       * @example rsp_16yc
       */
      id: string;
      /**
       * @description Name of the message template
       * @example Pam wedding planning complaint
       */
      name: string;
      /**
       * @description Subject of the message template
       * @example Work time being used for wedding planning
       */
      subject: string | null;
      /**
       * @description Body of the message template
       * @example <div><p>Pam is spending time planning her <span style="color:red;">wedding</span> at the office. This message <b>WAS NOT</b> sent by Angela.</p></div>
       *
       */
      body: string;
      /** @description List of files attached to the response */
      attachments: components["schemas"]["Attachment"][];
      /**
       * @description Whether or not the template is available in all inboxes.
       * @example true
       */
      is_available_for_all_inboxes: boolean;
      /** @description List of inboxes the template is available in. Null if there are no restrictions. */
      inbox_ids: string[] | null;
    };
    OutboundMessage: {
      /** @description List of the recipient handles who will receive this message */
      to: string[];
      /** @description List of the recipient handles who will receive a copy of this message */
      cc?: string[];
      /** @description List of the recipient handles who will receive a blind copy of this message */
      bcc?: string[];
      /** @description Name used for the sender info of the message */
      sender_name?: string;
      /** @description Subject of the message for email message */
      subject?: string;
      /** @description ID of the teammate on behalf of whom the answer is sent */
      author_id?: string;
      /** @description Body of the message */
      body: string;
      /** @description Text version of the body for email messages */
      text?: string;
      options?: {
        /** @description List of tag IDs to add to the conversation */
        tag_ids?: string[];
        /**
         * @description Archive the conversation right when sending the message
         * @default true
         */
        archive: boolean;
      };
      /** @description Binary data of attached files. Must use `Content-Type: multipart/form-data` if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb) or read more about [Attachments](https://dev.frontapp.com/docs/attachments-1). Max 25 MB. */
      attachments?: string[];
      /** @description ID of the signature to attach to this draft. If null, no signature is attached. */
      signature_id?: string;
      /** @description Whether or not Front should try to resolve a signature for the message. Is ignored if signature_id is included or if author_id is omitted. Default false; */
      should_add_default_signature?: boolean;
    };
    OutboundReplyMessage: {
      /** @description List of the recipient handles who will receive this message */
      to?: string[];
      /** @description List of the recipient handles who will receive a copy of this message */
      cc?: string[];
      /** @description List of the recipient handles who will receive a copy of this message */
      bcc?: string[];
      /** @description Name used for the sender info of the message */
      sender_name?: string;
      /** @description Subject of the message for email message */
      subject?: string;
      /** @description ID of the teammate on behalf of whom the answer is sent */
      author_id?: string;
      /** @description Channel ID the message is sent from */
      channel_id?: string;
      /** @description Body of the message */
      body: string;
      /** @description Text version of the body for email messages */
      text?: string;
      /** @description Body for the quote that the message is referencing. Only available on email channels. */
      quote_body?: string;
      options?: {
        /** @description List of tag IDs to add to the conversation */
        tag_ids?: string[];
        /**
         * @description Archive the conversation right when sending the message. `true` by default
         * @default true
         */
        archive: boolean;
      };
      /** @description Binary data of attached files. Must use `Content-Type: multipart/form-data` if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb) or read more about [Attachments](https://dev.frontapp.com/docs/attachments-1).  Max 25 MB. */
      attachments?: string[];
      /** @description ID of the signature to attach to this draft. If null, no signature is attached. */
      signature_id?: string;
      /** @description Whether or not Front should try to resolve a signature for the message. Is ignored if signature_id is included or if author_id is omitted. Default false; */
      should_add_default_signature?: boolean;
    };
    RecipientResponse: {
      _links: {
        related?: {
          /**
           * @description Link to recipient contact
           * @example https://yourCompany.api.frontapp.com/contacts/crd_2njtoem
           */
          contact?: string | null;
        };
      };
      /**
       * @description Name of the recipient.
       * @example Phyllis Lapin-Vance
       */
      name: string | null;
      /**
       * @description Handle of the contact. Can be any string used to uniquely identify the contact
       * @example purpleboss@limitlesspaper.com
       */
      handle: string;
      /**
       * @description Role of the recipient
       * @example cc
       * @enum {string}
       */
      role: "from" | "to" | "cc" | "bcc" | "reply-to";
    };
    Reminder: {
      _links: {
        related?: {
          /**
           * @description Link to conversation owner
           * @example https://yourCompany.api.frontapp.com/teammates/tea_6r55a
           */
          owner?: string;
        };
      };
      /**
       * @description Timestamp at which the conversation reminder has been created
       * @example 1701806790.536
       */
      created_at?: number;
      /**
       * @description Timestamp that the conversation reminder has been scheduled for
       * @example 1701874800
       */
      scheduled_at?: number;
      /**
       * @description Timestamp at which the conversation reminder has been updated
       * @example 1701806790.536
       */
      updated_at?: number;
    };
    RemoveContactsFromList: {
      /** @description List of IDs of the contacts to remove from the requested contact list. Alternatively, you can supply the contact source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
      contact_ids: components["schemas"]["ResourceID"][];
    };
    ReplyDraft: WithRequired<components["schemas"]["CreateDraft"], "body"> & {
      /** @description ID of the channel from which the draft will be sent. Alternatively, you can supply the channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
      channel_id: string;
    };
    ResourceID: string;
    RoleResponse: {
      _links: {
        related?: {
          /**
           * @description Link to role owner
           * @example tea_5xs26
           */
          owner?: string;
        };
      };
      /** @description Unique identifier of the role */
      id: string;
      /**
       * @description Name of the role
       * @example from
       */
      name: string;
    };
    RuleResponse: {
      _links: {
        /**
         * @description Link to resource
         * @example https://yourCompany.api.frontapp.com/rules/rul_58xhq
         */
        self?: string;
        related?: {
          /**
           * @description Link to rule owner
           * @example null
           */
          owner?: string | null;
        };
      };
      /**
       * @description Unique identifier of the rule
       * @example rul_58xhq
       */
      id: string;
      /**
       * @description Name of the rule
       * @example Scranton new account workflow
       */
      name: string;
      /** @description List of the rule's actions description */
      actions: string[];
      /**
       * @description Whether or not the rule is individual
       * @example false
       */
      is_private: boolean;
    };
    SeenReceiptResponse: {
      _links: {
        /**
         * @description Link to self
         * @example https://yourCompany.api.frontapp.com/messages/msg_1p4lvjym/seen
         */
        self?: string;
        related?: {
          /**
           * @description Link to message associated with the seen record
           * @example https://yourCompany.api.frontapp.com/messages/msg_1p4lvjym
           */
          message?: string;
        };
      };
      /**
       * @description Timestamp when message was seen
       * @example 1701298738269
       */
      first_seen_at: string;
      seen_by: components["schemas"]["ContactHandle"];
    };
    ShiftInterval: {
      /**
       * @description Start of shift
       * @example 09:00
       */
      start: string;
      /**
       * @description End of shift
       * @example 17:00
       */
      end: string;
    };
    ShiftIntervals: {
      mon?: components["schemas"]["ShiftInterval"];
      tue?: components["schemas"]["ShiftInterval"];
      wed?: components["schemas"]["ShiftInterval"];
      thu?: components["schemas"]["ShiftInterval"];
      fri?: components["schemas"]["ShiftInterval"];
      sat?: components["schemas"]["ShiftInterval"];
      sun?: components["schemas"]["ShiftInterval"];
    };
    ShiftResponse: {
      _links: {
        /**
         * @description Link to resource
         * @example https://yourCompany.api.frontapp.com/shifts/shf_1bri
         */
        self?: string;
        related?: {
          /**
           * @description Link to shift teammates
           * @example https://yourCompany.api.frontapp.com/shifts/shf_1bri/teammates
           */
          teammates?: string;
          /**
           * @description Link to shift owner
           * @example https://yourCompany.api.frontapp.com/teams/tim_4kxji
           */
          owner?: string;
        };
      };
      /**
       * @description Unique identifier of the shift
       * @example shf_1bri
       */
      id: string;
      /**
       * @description Name of the shift
       * @example Scranton Business Park shifts
       */
      name: string;
      /**
       * @description Color of the shift
       * @example green
       * @enum {string}
       */
      color:
        | "black"
        | "grey"
        | "pink"
        | "purple"
        | "blue"
        | "teal"
        | "green"
        | "yellow"
        | "orange"
        | "red";
      /**
       * @description A timezone name as defined in the IANA tz database
       * @example America/New_York
       */
      timezone: string;
      /** @description The shift intervals per day of the week */
      times: components["schemas"]["ShiftIntervals"];
      /**
       * @description The timestamp when the shift was created.
       * @example 1606943265.298
       */
      created_at?: number;
      /**
       * @description The timestamp when the shift was updated.
       * @example 1701878404.43
       */
      updated_at?: number;
    };
    SignatureResponse: {
      _links: {
        /**
         * @description Link to resource
         * @example https://yourCompany.api.frontapp.com/signatures/sig_6rrv2
         */
        self?: string;
        related?: {
          /**
           * @description Link to signature's owner (either a team or teammate)
           * @example https://yourCompany.api.frontapp.com/teams/tim_k30
           */
          owner?: string;
        };
      };
      /**
       * @description Unique identifier of the signature
       * @example sig_6rrv2
       */
      id: string;
      /**
       * @description Name of the signature
       * @example Finer Things Club signature
       */
      name: string | null;
      /**
       * @description Body of the signature
       * @example <div>—<br />{{user.name}}<br />No paper, no plastic, and no work talk allowed<br /></div>
       */
      body: string;
      /**
       * @description Sender info of the signature
       * @example {
       *       "[object Object]": null
       *     }
       */
      sender_info: string | null;
      /**
       * @description Whether or not the signature is available in teammate channels.
       * @example true
       */
      is_visible_for_all_teammate_channels: boolean;
      /**
       * @description Whether the signature is the default signature for the team or teammate.
       * @example false
       */
      is_default: boolean;
      /**
       * @description Whether the signature is private to the teammate.
       * @example true
       */
      is_private: boolean;
      channel_ids: string[] | null;
    };
    /** @description A ticket status of a conversation. */
    StatusResponse: {
      _links: {
        /**
         * @description Link to ticket status
         * @example https://yourCompany.api.frontapp.com/company/statuses/sts_5z
         */
        self?: string;
      };
      /**
       * @description Unique identifier of the ticket status
       * @example sts_5z
       */
      id: string;
      /**
       * @description The name of the ticket status. Default statuses match the category name. Custom statuses have a unique name.
       * @example Open
       */
      name: string;
      /**
       * @description Category of the ticket status.
       * @example open
       * @enum {string|null}
       */
      category: "open" | "waiting" | "resolved" | null;
      /**
       * @description Description of the ticket status
       * @example New or currently being worked on
       */
      description: string | null;
      /**
       * @description Timestamp of ticket status creation
       * @example 1682538996.583
       */
      created_at?: number;
      /**
       * @description Timestamp of the last ticket status update
       * @example 1699575875.186
       */
      updated_at?: number;
    };
    TagIds: {
      tag_ids: components["schemas"]["ResourceID"][];
    };
    /** @description A tag is a label that can be used to classify conversations. */
    TagResponse: {
      _links: {
        /**
         * @description Link to resource
         * @example https://yourCompany.api.frontapp.com/tags/tag_2oxhvy
         */
        self?: string;
        related?: {
          /**
           * @description Link to tag conversations
           * @example https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/conversations
           */
          conversations?: string;
          /**
           * @description Link to tag owner
           * @example https://yourCompany.api.frontapp.com/teammates/tea_6jydq
           */
          owner?: string | null;
          /**
           * @description Link to parent tag
           * @example https://yourCompany.api.frontapp.com/tags/tag_3h07ym
           */
          parent_tag?: string | null;
          /**
           * @description Link to tag children
           * @example https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/children
           */
          children?: string | null;
        };
      };
      /**
       * @description Unique identifier of the tag
       * @example tag_2oxhvy
       */
      id: string;
      /**
       * @description Name of the tag
       * @example Warehouse task
       */
      name: string;
      /**
       * @description Description of the tag
       * @example Sitting on your biscuit, never having to risk it
       */
      description: string | null;
      /**
       * @description Highlight color or emoji of the tag. Null if the tag does not have a highlight.
       * @example null
       */
      highlight: string | null;
      /**
       * @description Whether or not the tag is individual
       * @example false
       */
      is_private: boolean;
      /**
       * @description Whether the tag is visible in conversation lists.
       * @example true
       */
      is_visible_in_conversation_lists: boolean;
      /**
       * @description Timestamp of tag create creation
       * @example 1682538996.583
       */
      created_at?: number;
      /**
       * @description Timestamp of the last tag update
       * @example 1699575875.186
       */
      updated_at?: number;
    };
    TeamIds: {
      team_ids: components["schemas"]["ResourceID"][];
    };
    TeamPreviewResponse: {
      _links: {
        /**
         * @description Link to resource
         * @example https://yourCompany.api.frontapp.com/teams/tim_aqsa
         */
        self?: string;
      };
      /**
       * @description Unique identifier of the team
       * @example tim_aqsa
       */
      id: string;
      /**
       * @description Name of the team
       * @example Stanley's crossword puzzle team
       */
      name: string;
    };
    TeamResponse: {
      _links: {
        /**
         * @description Link to resource
         * @example https://yourCompany.api.frontapp.com/teams/tim_aqsa
         */
        self?: string;
      };
      /**
       * @description Unique identifier of the team
       * @example tim_aqsa
       */
      id: string;
      /**
       * @description Name of the team
       * @example Stanley's crossword puzzle team
       */
      name: string;
      /** @description List of the inboxes in the team */
      inboxes: components["schemas"]["InboxResponse"][];
      /** @description List of the teammates that have access to the team */
      members: components["schemas"]["TeammateResponse"][];
    };
    /** @description A teammate group is a group of teammates in Front. */
    TeammateGroupResponse: {
      _links: {
        /**
         * @description Link to resource
         * @example https://yourCompany.api.frontapp.com/teammate_groups/cir_123
         */
        self?: string;
        related?: {
          /**
           * @description Link to list of teammate members
           * @example https://yourCompany.api.frontapp.com/teammate_groups/cir_123/teammates
           */
          teammates?: string;
          /**
           * @description Link to list of associated teams
           * @example https://yourCompany.api.frontapp.com/teammate_groups/cir_123/teams
           */
          teams?: string;
          /**
           * @description Link to list of inboxes that teammate members can access
           * @example https://yourCompany.api.frontapp.com/teammate_groups/cir_123/inboxes
           */
          inboxes?: string;
        };
      };
      /**
       * @description Unique identifier of the teammate group
       * @example cir_123
       */
      id: string;
      /**
       * @description The name of the teammate group
       * @example Sales team
       */
      name: string;
      /**
       * @description Description of the teammate group
       * @example Best sales team ever
       */
      description: string | null;
      /**
       * @description Is teammate group managed by SCIM or by Front
       * @example false
       */
      is_managed_by_scim: boolean;
      /**
       * @description Permissions for the teammate group
       * @example {
       *       "contacts": {
       *         "access": "contact_lists",
       *         "contact_list_ids": [
       *           "grp_1",
       *           "grp_2"
       *         ]
       *       }
       *     }
       */
      permissions: {
        /** @description Permissions for teammate group access to contact lists */
        contacts?: {
          /** @description Level of access for the teammate group to contact lists. Must be one of 'all', 'contact_lists', or 'none'. */
          access?: string;
          /**
           * @description List of contact lists the teammate group is allowed to access. May only be specified if 'access' is set to 'contact_lists'.
           * @example [
           *       "grp_123",
           *       "grp_456"
           *     ]
           */
          contact_list_ids?: string[];
        };
      };
    };
    TeammateIds: {
      teammate_ids: components["schemas"]["ResourceID"][];
    };
    /** @description A teammate is a user in Front. */
    TeammateResponse: {
      _links: {
        /**
         * @description Link to resource
         * @example https://yourCompany.api.frontapp.com/teammates/tea_6r55a
         */
        self?: string;
        related?: {
          /**
           * @description Link to teammate's inboxes
           * @example https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes
           */
          inboxes?: string;
          /**
           * @description Link to teammate's conversations
           * @example https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations
           */
          conversations?: string;
          /**
           * @description Link to the source resource of the bot (e.g. rule)
           * @example https://yourCompany.api.frontapp.com/rules/rul_6r55a
           */
          botSource?: string;
        };
      };
      /**
       * @description Unique identifier of the teammate
       * @example tea_6r55a
       */
      id: string;
      /**
       * @description Email address of the teammate
       * @example michael.scott@dundermifflin.com
       */
      email: string;
      /**
       * @description Username of the teammate (used for "@" mentions)
       * @example PrisonMike
       */
      username: string;
      /**
       * @description First name of the teammate
       * @example Michael
       */
      first_name: string;
      /**
       * @description Last name of the teammate
       * @example Scott
       */
      last_name: string;
      /**
       * @description Whether or not the teammate is an admin in your company
       * @example true
       */
      is_admin: boolean;
      /**
       * @description Whether or not the teammate is available
       * @example false
       */
      is_available: boolean;
      /**
       * @description Whether or not the teammate account has been blocked
       * @example false
       */
      is_blocked: boolean;
      /**
       * @description Type of the teammate, normal teammates are denoted as "user", while visitors are denoted as "visitor".
       *     Bot users are denoted by their parent resource type.
       *     The following bot types are available:
       *       * rule: acting on behalf of a Rule, author of comments and drafts
       *       * macro: acting on behalf of a Macro, author of comments and drafts
       *       * API: acting on behalf of OAuth clients
       *       * integration: acting on behalf of an Integration
       *       * CSAT: used for authoring CSAT response comments
       *
       * @enum {string}
       */
      type:
        | "user"
        | "visitor"
        | "rule"
        | "macro"
        | "API"
        | "integration"
        | "CSAT";
      /** @description Custom fields for this teammate */
      custom_fields: components["schemas"]["CustomFieldParameter"];
    };
    UpdateChannel: {
      /**
       * @description Name of the channel
       * @example Your channel name
       */
      name?: string;
      /** @description ID of the inbox to move this channel to. Will also move corresponding conversations. */
      inbox_id?: string;
      /** @description Settings to replace.
       *     For custom channels, all settings may be replaced.
       *     For all other channels, only `undo_send_time` and `all_teammates_can_reply` may be replaced.
       *      */
      settings?: {
        /**
         * @description The time (measured in seconds) that users have to undo a send operation in the channel.
         * @enum {integer}
         */
        undo_send_time?: 0 | 5 | 10 | 15 | 30 | 60;
        /** @description Whether teammates without inbox access can reply on this channel. Only allowed for shared channels. */
        all_teammates_can_reply?: boolean;
        /** @description The webhook URL outbound messages should be sent to. Only allowed for "custom" type channels. */
        webhook_url?: string;
      };
    };
    UpdateComment: {
      /** @description Content of the comment. Can include markdown formatting. Can only be updated if the comment was created using the same token. */
      body?: string;
      /** @description Whether or not the comment is pinned in its conversation. */
      is_pinned?: boolean;
    };
    UpdateConversation: {
      /** @description ID of the teammate to assign the conversation to. Set it to null to unassign. */
      assignee_id?: string;
      /** @description ID of the inbox to move the conversation to. */
      inbox_id?: string;
      /**
       * @description New status of the conversation
       * @enum {string}
       */
      status?: "archived" | "open" | "deleted" | "spam";
      /**
       * @description Unique identifier of the status to set the conversation to. Only one of status and status_id should be provided. Ticketing must be enabled for the company to use this field.
       * @example sts_123
       */
      status_id?: string;
      /** @description List of all the tag IDs replacing the old conversation tags */
      tag_ids?: components["schemas"]["ResourceID"][];
      /** @description Custom fields for this conversation. If you want to keep all custom fields the same when updating this resource, do not include any custom fields in the update. If you want to update custom fields, make sure to include all custom fields, not just the fields you want to add or update. If you send only the custom fields you want to update, the other custom fields will be erased. You can retrieve the existing custom fields before making the update to note the current fields. Send as an object of key:value pairs where the key is the custom field name and the value is the custom field value. */
      custom_fields?: components["schemas"]["CustomFieldParameter"];
    };
    UpdateConversationAssignee: {
      /** @description ID of the teammate to assign the conversation to. Set it to null to unassign. */
      assignee_id: string;
    };
    UpdateConversationReminders: {
      /** @description ID of the teammate to create a reminder for. For a private conversation, specify the id of the teammate that owns the conversation. For a shared conversation, use the id of any teammate that has access to the conversation's shared inbox. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
      teammate_id: string;
      /** @description Timestamp to schedule the reminder for. Set to null to cancel. */
      scheduled_at: number;
      /** @description ID of the waiting status to which the conversation will be set. Ticketing must be enabled for the company to use this field. If no status is supplied and ticket is enabled, the default waiting status will be used. */
      status_id?: string;
    };
    UpdateLink: {
      /** @description Name of the link */
      name?: string;
    };
    UpdateMessageTemplate: {
      /** @description Name of the message template */
      name?: string;
      /** @description Subject of the message template */
      subject?: string;
      /**
       * @description Body of the message template. You can supply HTML with inline CSS to structure and style your template.
       * @example <p>Sorry, I'm OOO until <span style="color: green;">October 25th</span>.</p>
       *
       */
      body?: string;
      /** @description ID of the parent folder to be placed into. Goes into the root folder if unspecified or if null. */
      folder_id?: string;
      /** @description The specific inboxes this template is available in. If null, then it will be available in all inboxes. Array should be non-empty. If unspecified, will retain previous value. */
      inbox_ids?: string[];
      /** @description Binary data of attached files. Must use `Content-Type: multipart/form-data` if specified. See [example](https://dev.frontapp.com/docs/attachments-1). Max 25 MB. Specify an empty array to delete all attachments from a message template. If unspecified, it will retain previous value. */
      attachments?: string[];
    };
    /** @description A message template folder that is used to store message templates or other folders. */
    UpdateMessageTemplateFolder: {
      /** @description Name of the message template folder */
      name?: string;
      /** @description ID of the parent folder to be placed into. Goes into the root folder if unspecified or if null. */
      parent_folder_id?: string;
    };
    UpdateShift: {
      /** @description Name of the shift */
      name?: string;
      /**
       * @description Color of the shift
       * @enum {string}
       */
      color?:
        | "black"
        | "grey"
        | "pink"
        | "purple"
        | "blue"
        | "teal"
        | "green"
        | "yellow"
        | "orange"
        | "red";
      /** @description A timezone name as defined in the IANA tz database */
      timezone?: string;
      /** @description The shift intervals per day of the week */
      times?: components["schemas"]["ShiftIntervals"];
      /** @description List of all the teammate ids who will be part of this shift. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
      teammate_ids?: components["schemas"]["ResourceID"][];
    };
    /** @description A signature that can be used to sign messages. */
    UpdateSignature: {
      /** @description Name of the signature */
      name?: string;
      /** @description Sender info of the signature that will appear in the From line of emails sent. */
      sender_info?: string;
      /** @description Body of the signature */
      body?: string;
      /** @description Whether or not the signature is visible in all individual channels for teammates in the given team. Can only be set for shared signatures. */
      is_visible_for_all_teammate_channels?: boolean;
      /**
       * @description If true, the signature will be set as the default signature for the team or teammate.
       * @default false
       */
      is_default: boolean;
      /** @description The specific shared channels this signature if available in. If null, then it will be available in all channels. If unspecified, will retain previous value. Alternatively, you can specify channels using a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
      channel_ids?: string[];
    };
    UpdateTag: {
      /** @description Name of the tag */
      name?: string;
      /** @description Description of the tag */
      description?: string;
      /**
       * @description Highlight color of the tag.
       * @enum {string}
       */
      highlight?:
        | "grey"
        | "pink"
        | "red"
        | "orange"
        | "yellow"
        | "green"
        | "light-blue"
        | "blue"
        | "purple";
      /** @description ID of the parent of this tag. Set to `null` to remove  the parent tag. */
      parent_tag_id?: string;
      /** @description Whether the tag is visible in conversation lists. */
      is_visible_in_conversation_lists?: boolean;
    };
    UpdateTeammate: {
      /** @description New username. It must be unique and can only contains lowercase letters, numbers and underscores. */
      username?: string;
      /** @description New first name */
      first_name?: string;
      /** @description New last name */
      last_name?: string;
      /** @description New availability status */
      is_available?: boolean;
      /** @description Custom fields for this teammate. If you want to keep all custom fields the same when updating this resource, do not include any custom fields in the update. If you want to update custom fields, make sure to include all custom fields, not just the fields you want to add or update. If you send only the custom fields you want to update, the other custom fields will be erased. You can retrieve the existing custom fields before making the update to note the current fields. */
      custom_fields?: components["schemas"]["CustomFieldParameter"];
    };
    UpdateTeammateGroup: {
      /** @description Name of the teammate group */
      name?: string;
      /** @description Description of the teammate group */
      description?: string;
      /** @description Permissions for the teammate group */
      permissions?: {
        /** @description Permissions for accessing contact lists. This only applies if shared contacts permissions are enabled. */
        contacts?: {
          /** @description One of 'all', 'contact_groups', 'contact_lists', or 'none'. */
          access: string;
          /**
           * @deprecated
           * @description List of contact group ids. Can only be specified if access is set to 'contact_groups'. ⚠️ Deprecated. Use access 'contact_lists' and 'contact_list_ids' instead.
           */
          contact_group_ids?: string[];
          /** @description List of contact list ids. Can only be specified if access is set to 'contact_lists'. */
          contact_list_ids?: string[];
        };
      };
    };
  };
  responses: {
    /** @description Array of message templates */
    listOfCannedAnswers: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          _pagination?: {
            /**
             * @description Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             * @example https://yourCompany.api.frontapp.com/message_templates?page_token=9fa92a7f385fd7be43f7153055b30e6d
             */
            next?: string | null;
          };
          _links?: {
            /**
             * @description Link to resource
             * @example https://yourCompany.api.frontapp.com/message_templates
             */
            self?: string;
          };
          _results?: components["schemas"]["MessageTemplateResponse"][];
        };
      };
    };
    /** @description Array of message template folders */
    listOfCannedAnswerFolders: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          _pagination?: {
            /**
             * @description Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             * @example https://yourCompany.api.frontapp.com/message_template_folders?page_token=9fa92a7f385fd7be43f7153055b30e6d
             */
            next?: string | null;
          };
          _links?: {
            /**
             * @description Link to resource
             * @example https://yourCompany.api.frontapp.com/message_template_folders
             */
            self?: string;
          };
          _results?: components["schemas"]["MessageTemplateFolderResponse"][];
        };
      };
    };
    /** @description Array of signatures */
    listOfSignatures: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          _pagination?: {
            /**
             * @description Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             * @example https://yourCompany.api.frontapp.com/signatures?page_token=9fa92a7f385fd7be43f7153055b30e6d
             */
            next?: string | null;
          };
          _links?: {
            /**
             * @description Link to resource
             * @example https://yourCompany.api.frontapp.com/signatures
             */
            self?: string;
          };
          _results?: components["schemas"]["SignatureResponse"][];
        };
      };
    };
    /** @description Array of Inboxes */
    listOfInboxes: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          _links?: {
            /**
             * @description Link to resource
             * @example https://yourCompany.api.frontapp.com/inboxes
             */
            self?: string;
          };
          _results?: components["schemas"]["InboxResponse"][];
        };
      };
    };
    /** @description Array of Comments */
    listOfComments: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          _links?: {
            /**
             * @description Link to resource
             * @example https://yourCompany.api.frontapp.com/conversations/cnv_y4xb93i/comments
             */
            self?: string;
          };
          _results?: components["schemas"]["CommentResponse"][];
        };
      };
    };
    /** @description Array of teams */
    listOfTeams: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          _links?: {
            /**
             * @description Link to resource
             * @example https://yourCompany.api.frontapp.com/teams
             */
            self?: string;
          };
          _results?: components["schemas"]["TeamPreviewResponse"][];
        };
      };
    };
    /** @description Array of teammates */
    listOfTeammates: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          _links?: {
            /**
             * @description Link to resource
             * @example https://yourCompany.api.frontapp.com/teammates
             */
            self?: string;
          };
          _results?: components["schemas"]["TeammateResponse"][];
        };
      };
    };
    /** @description Array of teammate groups */
    listOfTeammateGroups: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          _links?: {
            /**
             * @description Link to resource
             * @example https://yourCompany.api.frontapp.com/teammate_groups
             */
            self?: string;
          };
          _results?: components["schemas"]["TeammateGroupResponse"][];
        };
      };
    };
    /** @description Array of Shifts */
    listOfShifts: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          _links?: {
            /**
             * @description Link to resource
             * @example https://yourCompany.api.frontapp.com/shifts
             */
            self?: string;
          };
          _results?: components["schemas"]["ShiftResponse"][];
        };
      };
    };
    /** @description Array of contacts */
    listOfContacts: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          _pagination?: {
            /**
             * @description Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             * @example https://yourCompany.api.frontapp.com/contacts?page_token=e0b5767cb0f1100743d46f67fcd765caac2ed
             */
            next?: string | null;
          };
          _links?: {
            /**
             * @description Link to resource
             * @example https://yourCompany.api.frontapp.com/contacts
             */
            self?: string;
          };
          _results?: components["schemas"]["ContactResponse"][];
        };
      };
    };
    /** @description Array of accounts */
    listOfAccounts: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          _pagination?: {
            /**
             * @description Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             * @example https://yourCompany.api.frontapp.com/accounts?page_token=abae846b73ddd80f67fff73c491c41b8b0e74972f3a1079c3c8800416e06cf46
             */
            next?: string | null;
          };
          _links?: {
            /**
             * @description Link to resource
             * @example https://yourCompany.api.frontapp.com/accounts
             */
            self?: string;
          };
          _results?: components["schemas"]["AccountResponse"][];
        };
      };
    };
    /** @description Array of contact lists */
    listOfContactLists: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          _links?: {
            /**
             * @description Link to resource
             * @example https://yourCompany.api.frontapp.com/contact_lists
             */
            self?: string;
          };
          _results?: components["schemas"]["ContactListResponses"][];
        };
      };
    };
    /** @description Array of contact notes */
    listOfContactNotes: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          _links?: {
            /**
             * @description Link to resource
             * @example https://yourCompany.api.frontapp.com/contacts/crd_2okzojy/notes
             */
            self?: string;
          };
          _results?: components["schemas"]["ContactNoteResponses"][];
        };
      };
    };
    /** @description Array of messages */
    listOfMessages: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          _pagination?: {
            /**
             * @description Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             * @example https://yourCompany.api.frontapp.com/conversations/cnv_y4xb93i/messages?page_token=klsljs8023j09suidfjlsjiei00043lllwww998303dkef0g
             */
            next?: string | null;
          };
          _links?: {
            /**
             * @description Link to resource
             * @example https://yourCompany.api.frontapp.com/conversations/cnv_y4xb93i/messages
             */
            self?: string;
          };
          _results?: components["schemas"]["MessageResponse"][];
        };
      };
    };
    /** @description Array of seen receipts */
    listOfSeenReceipts: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          _pagination?: {
            /**
             * @description Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             * @example https://yourCompany.api.frontapp.com/messages/msg_1p4lvjym/seen?page_token=jk7893fgeet644abnn39
             */
            next?: string | null;
          };
          _links?: {
            /**
             * @description Link to resource
             * @example https://yourCompany.api.frontapp.com/messages/msg_1p4lvjym/seen
             */
            self?: string;
          };
          _results?: components["schemas"]["SeenReceiptResponse"][];
        };
      };
    };
    /** @description Array of conversations */
    listOfConversations: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          _pagination?: {
            /**
             * @description Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             * @example https://yourCompany.api.frontapp.com/conversations?page_token=ce787da6f075740cf187d926f5e9f612bc7875763a8dd37d5
             */
            next?: string | null;
          };
          _links?: {
            /**
             * @description Link to resource
             * @example https://yourCompany.api.frontapp.com/conversations
             */
            self?: string;
          };
          _results?: components["schemas"]["ConversationResponse"][];
        };
      };
    };
    /** @description Array of conversation search results */
    listOfConversationSearchResults: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          _pagination?: {
            /**
             * @description Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             * @example https://yourCompany.api.frontapp.com/conversations/search/:query:?page_token=d4d5f065c89f1284ea262fa6b19456239b0
             */
            next?: string | null;
          };
          _links?: {
            /**
             * @description Link to resource
             * @example https://yourCompany.api.frontapp.com/conversations/search/:query:
             */
            self?: string;
          };
          /**
           * @description Total number of matching conversations
           * @example 212
           */
          _total?: number;
          _results?: components["schemas"]["ConversationResponse"][];
        };
      };
    };
    /** @description Array of events */
    listOfEvents: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          _pagination?: {
            /**
             * @description Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             * @example https://yourCompany.api.frontapp.com/events?page_token=2d018a5809eb90d349bc08c52cb1f4987bef
             */
            next?: string | null;
          };
          _links?: {
            /**
             * @description Link to resource
             * @example https://yourCompany.api.frontapp.com/events
             */
            self?: string;
          };
          _results?: components["schemas"]["EventResponse"][];
        };
      };
    };
    /** @description Array of Roles */
    listOfRoles: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          _links?: {
            /** @description Link to resource */
            self?: string;
          };
          _results?: components["schemas"]["RoleResponse"][];
        };
      };
    };
    /** @description Array of Rules */
    listOfRules: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          _links?: {
            /**
             * @description Link to resource
             * @example https://yourCompany.api.frontapp.com/rules
             */
            self?: string;
          };
          _results?: components["schemas"]["RuleResponse"][];
        };
      };
    };
    /** @description Array of Tags */
    listOfTags: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          _links?: {
            /**
             * @description Link to resource
             * @example https://yourCompany.api.frontapp.com/tags
             */
            self?: string;
          };
          _results?: components["schemas"]["TagResponse"][];
        };
      };
    };
    /** @description Array of ticket statuses */
    listOfStatuses: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          _links?: {
            /**
             * @description Link to resource
             * @example https://yourCompany.api.frontapp.com/company/statuses
             */
            self?: string;
          };
          _results?: components["schemas"]["StatusResponse"][];
        };
      };
    };
    /** @description Array of Links */
    listOfLinks: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          _pagination?: {
            /**
             * @description Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             * @example https://yourCompany.api.frontapp.com/links?page_token=4fcb1f8ca11971c5da59c21ea686fd50
             */
            next?: string | null;
          };
          _links?: {
            /**
             * @description Link to resource
             * @example https://yourCompany.api.frontapp.com/links
             */
            self?: string;
          };
          _results?: components["schemas"]["LinkResponse"][];
        };
      };
    };
    /** @description Array of Channels */
    listOfChannels: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          _links?: {
            /**
             * @description Link to resource
             * @example https://yourCompany.api.frontapp.com/channels
             */
            self?: string;
          };
          _results?: components["schemas"]["ChannelResponse"][];
        };
      };
    };
    /** @description Array of Custom Fields */
    listOfCustomFields: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          _links?: {
            /**
             * @description Link to resource
             * @example https://yourCompany.api.frontapp.com/custom_fields
             */
            self?: string;
          };
          _results?: components["schemas"]["CustomFieldResponse"][];
        };
      };
    };
    /** @description Array of knowledge bases */
    listOfKnowledgeBases: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          _links?: {
            /**
             * @description Link to resource
             * @example https://yourCompany.api.frontapp.com/knowledge_bases
             */
            self?: string;
          };
          _results?: components["schemas"]["KnowledgeBaseSlimResponse"][];
        };
      };
    };
    /** @description Array of knowledge base categories */
    listOfKnowledgeBaseCategories: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          _pagination?: {
            /**
             * @description Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             * @example https://yourCompany.api.frontapp.com/knowledge_bases/knb_1/categories?page_token=134287aba8eaa55cf366400c63300a75bab0c
             */
            next?: string | null;
          };
          _links?: {
            /**
             * @description Link to resource
             * @example https://yourCompany.api.frontapp.com/knowledge_bases/knb_1/categories
             */
            self?: string;
          };
          _results?: components["schemas"]["KnowledgeBaseCategorySlimResponse"][];
        };
      };
    };
    /** @description Array of knowledge base articles */
    listOfKnowledgeBaseArticles: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          _pagination?: {
            /**
             * @description Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             * @example https://yourCompany.api.frontapp.com/knowledge_bases/knb_1/articles?page_token=134287aba8eaa55cf366400c63300a75bab0c
             */
            next?: string | null;
          };
          _links?: {
            /**
             * @description Link to resource
             * @example https://yourCompany.api.frontapp.com/knowledge_bases/knb_1/articles
             */
            self?: string;
          };
          _results?: components["schemas"]["KnowledgeBaseArticleSlimResponse"][];
        };
      };
    };
    /** @description An Account */
    account: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["AccountResponse"];
      };
    };
    /** @description A contact */
    contact: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["ContactResponse"];
      };
    };
    /** @description A message */
    message: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["MessageResponse"];
      };
    };
    /** @description A conversation */
    conversation: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["ConversationResponse"];
      };
    };
    /** @description A role */
    role: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["RoleResponse"];
      };
    };
    /** @description A rule */
    rule: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["RuleResponse"];
      };
    };
    /** @description A tag */
    tag: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["TagResponse"];
      };
    };
    /** @description A ticket status */
    status: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["StatusResponse"];
      };
    };
    /** @description A link */
    link: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["LinkResponse"];
      };
    };
    /** @description The binary content of the attachment file */
    attachment: {
      headers: {
        /** @description The MIME type of the attachment file */
        "Content-Type"?: string;
        /** @description The size of the attachment file in bytes */
        "Content-Length"?: string;
        [name: string]: unknown;
      };
      content: {
        "*/*": string;
      };
    };
    /** @description API Token details */
    identity: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["IdentityResponse"];
      };
    };
    /** @description A message template */
    cannedAnswer: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["MessageTemplateResponse"];
      };
    };
    /** @description A message template folder */
    cannedAnswerFolder: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["MessageTemplateFolderResponse"];
      };
    };
    /** @description A signature */
    signature: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["SignatureResponse"];
      };
    };
    /** @description A contact note */
    contactNote: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["ContactNoteResponses"];
      };
    };
    /** @description A channel */
    channel: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["ChannelResponse"];
      };
    };
    /** @description A comment */
    comment: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["CommentResponse"];
      };
    };
    /** @description An inbox */
    inbox: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["InboxResponse"];
      };
    };
    /** @description A shift */
    shift: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["ShiftResponse"];
      };
    };
    /** @description A team */
    team: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["TeamResponse"];
      };
    };
    /** @description A teammate */
    teammate: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["TeammateResponse"];
      };
    };
    /** @description A teammate group */
    teammateGroup: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["TeammateGroupResponse"];
      };
    };
    /** @description An event */
    event: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["EventResponse"];
      };
    };
    /** @description A knowledge base with content */
    knowledgeBase: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["KnowledgeBaseResponse"];
      };
    };
    /** @description A knowledge base */
    knowledgeBaseSlim: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["KnowledgeBaseSlimResponse"];
      };
    };
    /** @description A knowledge base category with content */
    knowledgeBaseCategory: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["KnowledgeBaseCategoryResponse"];
      };
    };
    /** @description A knowledge base category */
    knowledgeBaseCategorySlim: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["KnowledgeBaseCategorySlimResponse"];
      };
    };
    /** @description A knowledge base article with content */
    knowledgeBaseArticle: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["KnowledgeBaseArticleResponse"];
      };
    };
    /** @description A knowledge base article */
    knowledgeBaseArticleSlim: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["KnowledgeBaseArticleSlimResponse"];
      };
    };
    /** @description An accepted response acknowledging your request to create a message */
    acceptedMessage: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          /**
           * @description The status of the incoming message. Should return 'accepted' if successful.
           * @default accepted
           * @example accepted
           */
          status: string;
          /**
           * @description Message unique identifier. Use the message UID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1) to check whether the [message is created successfully](https://dev.frontapp.com/reference/messages#creating-a-new-message).
           * @example 1eab543f84a0785f7b6b8967cck18f4d
           */
          message_uid?: string;
        };
      };
    };
    /** @description A message template folder accepted for deletion */
    acceptedCannedAnswerFolderDeletion: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          /**
           * @default accepted
           * @example accepted
           */
          status: string;
          /**
           * @description id of the message template to be deleted
           * @example rsf_g2
           */
          message_template_folder_id?: string;
        };
      };
    };
    /** @description Request accepted */
    accepted: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          /**
           * @default accepted
           * @example accepted
           */
          status: string;
        };
      };
    };
  };
  parameters: {
    /** @description [Search query object](https://dev.frontapp.com/docs/query-object-q) with optional properties `before`, `after`, `types`, or `inboxes`. `before` and `after` should be a timestamp in seconds with up to 3 decimal places. `types` should be a list of [event types](https://dev.frontapp.com/reference/events). `inboxes` should be a list of inbox IDs. */
    activityQuery: string;
    /** @description [Search query object](https://dev.frontapp.com/docs/query-object-q) with the optional properties `updated_after` and `updated_before`, whose value should be a timestamp in seconds with up to 3 decimal places. */
    cardQuery: string;
    /** @description [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property `statuses`, whose value should be a list of conversation statuses (`assigned`, `unassigned`, `archived`, or `trashed`). If ticketing is enabled, this endpoint accepts either `status_categories` (`open`, `waiting`, `resolved`) or `status_ids` as an alternative. */
    conversationQuery: string;
    /** @description [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property `types`, whose value should be a list of link types. Links created via the API have type `web` and links created by application objects have type `app_<uid>`, matching the app UID where the object is configured. There are also types `jira`, `asana`, `monday`, `trello`, and `github`, which correspond to the integrations built by Front. */
    topicQuery: string;
    /** @description Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) */
    pageToken: string;
    /** @description Max number of results per [page](https://dev.frontapp.com/docs/pagination) */
    limit: number;
    /** @description Field used to sort the accounts. Either `created_at` or `updated_at`. */
    sortByAccounts: string;
    /** @description Field used to sort the events. Only supports `created_at`. */
    sortByActivities: string;
    /** @description Field used to sort the contacts. Either `created_at` or `updated_at`. */
    sortByCards: string;
    /** @description Field used to sort the message templates. Either `created_at`, `updated_at`, or `sort_order`. */
    sortByCannedAnswers: string;
    /** @description Field used to sort the message template folders. Either `created_at` or `updated_at`. */
    sortByCannedAnswerFolders: string;
    /** @description Field used to sort the conversations. Only supports `date`. */
    sortByConversations: string;
    /** @description Field used to sort the messages. Only supports `created_at`. */
    sortByConversationMessages: string;
    /** @description Field used to sort the links. Only supports `id`. */
    sortByLinks: string;
    /** @description Field used to sort the tags. Only supports `id`. */
    sortByTags: string;
    /** @description Order by which results should be sorted */
    sortOrder: "asc" | "desc";
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  "list-accounts": {
    parameters: {
      query?: {
        /** @description Max number of results per [page](https://dev.frontapp.com/docs/pagination) */
        limit?: components["parameters"]["limit"];
        /** @description Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) */
        page_token?: components["parameters"]["pageToken"];
        /** @description Field used to sort the accounts. Either `created_at` or `updated_at`. */
        sort_by?: components["parameters"]["sortByAccounts"];
        /** @description Order by which results should be sorted */
        sort_order?: components["parameters"]["sortOrder"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfAccounts"];
    };
  };
  "create-account": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Account"];
      };
    };
    responses: {
      201: components["responses"]["account"];
    };
  };
  "list-account-custom-fields": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfCustomFields"];
    };
  };
  "fetch-an-account": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        account_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["account"];
    };
  };
  "delete-an-account": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        account_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "update-account": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        account_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AccountPatch"];
      };
    };
    responses: {
      200: components["responses"]["account"];
    };
  };
  "list-account-contacts": {
    parameters: {
      query?: {
        /** @description Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) */
        page_token?: components["parameters"]["pageToken"];
        /** @description Max number of results per [page](https://dev.frontapp.com/docs/pagination) */
        limit?: components["parameters"]["limit"];
        /** @description Field used to sort the contacts. Either `created_at` or `updated_at`. */
        sort_by?: components["parameters"]["sortByCards"];
        /** @description Order by which results should be sorted */
        sort_order?: components["parameters"]["sortOrder"];
      };
      header?: never;
      path: {
        /** @description The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        account_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfContacts"];
    };
  };
  "add-contact-to-account": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        account_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ContactIds"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "remove-contact-from-account": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        account_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ContactIds"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "create-analytics-export": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AnalyticsExportRequest"];
      };
    };
    responses: {
      /** @description An analytics export. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AnalyticsExportResponse"];
        };
      };
    };
  };
  "get-analytics-export": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The export ID. */
        export_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description An analytics export. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AnalyticsExportResponse"];
        };
      };
    };
  };
  "create-analytics-report": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AnalyticsReportRequest"];
      };
    };
    responses: {
      /** @description An analytics report. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AnalyticsReportResponse"];
        };
      };
    };
  };
  "get-analytics-report": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The report UID. */
        report_uid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description An analytics report. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AnalyticsReportResponse"];
        };
      };
    };
  };
  "trigger-app-event": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The application UID */
        application_uid: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AppEvent"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-channels": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfChannels"];
    };
  };
  "get-channel": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Channel ID. Alternatively, you can supply the channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        channel_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["channel"];
    };
  };
  "update-channel": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Channel ID. Alternatively, you can supply the channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        channel_id: string;
      };
      cookie?: never;
    };
    /** @description Channel details */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpdateChannel"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "create-draft": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The channel ID. Alternatively, you can supply the channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        channel_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateDraft"];
      };
    };
    responses: {
      200: components["responses"]["message"];
    };
  };
  "receive-custom-messages": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The channel ID. Alternatively, you can supply the channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        channel_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CustomMessage"];
      };
    };
    responses: {
      202: components["responses"]["acceptedMessage"];
    };
  };
  "create-message": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The sending channel ID. Alternatively, you can supply the sending channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        channel_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["OutboundMessage"];
      };
    };
    responses: {
      202: components["responses"]["acceptedMessage"];
    };
  };
  "validate-channel": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Channel ID. Alternatively, you can supply the channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        channel_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      202: components["responses"]["accepted"];
    };
  };
  "get-comment": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Comment ID */
        comment_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["comment"];
    };
  };
  "update-comment": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Comment ID */
        comment_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpdateComment"];
      };
    };
    responses: {
      200: components["responses"]["comment"];
    };
  };
  "download-attachment-for-a-comment": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Comment ID */
        comment_id: string;
        /** @description The Attachment ID */
        attachment_link_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["attachment"];
    };
  };
  "list-comment-mentions": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Comment ID */
        comment_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfTeammates"];
    };
  };
  "add-comment-reply": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The comment ID to reply to */
        comment_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateComment"];
      };
    };
    responses: {
      201: components["responses"]["comment"];
    };
  };
  "list-all-company-rules": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfRules"];
    };
  };
  "list-company-ticket-statuses": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfStatuses"];
      /** @description Ticketing is not enabled, therefore, there are no ticket statuses. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "get-ticket-status-by-id": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ticket status ID */
        status_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["status"];
    };
  };
  "list-company-tags": {
    parameters: {
      query?: {
        /** @description Max number of results per [page](https://dev.frontapp.com/docs/pagination) */
        limit?: components["parameters"]["limit"];
        /** @description Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) */
        page_token?: components["parameters"]["pageToken"];
        /** @description Field used to sort the tags. Only supports `id`. */
        sort_by?: components["parameters"]["sortByTags"];
        /** @description Order by which results should be sorted */
        sort_order?: components["parameters"]["sortOrder"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfTags"];
    };
  };
  "create-company-tag": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Tag to create */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateTag"];
      };
    };
    responses: {
      201: components["responses"]["tag"];
    };
  };
  "list-groups": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfContactLists"];
    };
  };
  "create-group": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateContactList"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "delete-group": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The contact group ID */
        contact_group_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-contacts-in-group": {
    parameters: {
      query?: {
        /** @description Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) */
        page_token?: components["parameters"]["pageToken"];
        /** @description Max number of results per [page](https://dev.frontapp.com/docs/pagination) */
        limit?: components["parameters"]["limit"];
      };
      header?: never;
      path: {
        /** @description The contact group ID */
        contact_group_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfContacts"];
    };
  };
  "add-contacts-to-group": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The contact group ID */
        contact_group_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AddContactsToList"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "remove-contacts-from-group": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The contact group ID */
        contact_group_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["RemoveContactsFromList"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-contact-lists": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfContactLists"];
    };
  };
  "create-contact-list": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateContactList"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "delete-contact-list": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The contact list ID */
        contact_list_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-contacts-in-contact-list": {
    parameters: {
      query?: {
        /** @description Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) */
        page_token?: components["parameters"]["pageToken"];
        /** @description Max number of results per [page](https://dev.frontapp.com/docs/pagination) */
        limit?: components["parameters"]["limit"];
      };
      header?: never;
      path: {
        /** @description The contact list ID */
        contact_list_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfContacts"];
    };
  };
  "add-contacts-to-contact-list": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The contact list ID */
        contact_list_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AddContactsToList"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "remove-contacts-from-contact-list": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The contact list ID */
        contact_list_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["RemoveContactsFromList"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-contacts": {
    parameters: {
      query?: {
        /** @description [Search query object](https://dev.frontapp.com/docs/query-object-q) with the optional properties `updated_after` and `updated_before`, whose value should be a timestamp in seconds with up to 3 decimal places. */
        q?: components["parameters"]["cardQuery"];
        /** @description Max number of results per [page](https://dev.frontapp.com/docs/pagination) */
        limit?: components["parameters"]["limit"];
        /** @description Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) */
        page_token?: components["parameters"]["pageToken"];
        /** @description Field used to sort the contacts. Either `created_at` or `updated_at`. */
        sort_by?: components["parameters"]["sortByCards"];
        /** @description Order by which results should be sorted */
        sort_order?: components["parameters"]["sortOrder"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfContacts"];
    };
  };
  "create-contact": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateContact"];
      };
    };
    responses: {
      201: components["responses"]["contact"];
    };
  };
  "list-contact-custom-fields": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfCustomFields"];
    };
  };
  "merge-contacts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["MergeContacts"];
      };
    };
    responses: {
      200: components["responses"]["contact"];
    };
  };
  "get-contact": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The contact ID. Alternatively, you can supply the contact's source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        contact_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["contact"];
    };
  };
  "delete-a-contact": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The contact ID. Alternatively, you can supply the contact's source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        contact_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "update-a-contact": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The contact ID. Alternatively, you can supply the contact's source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        contact_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Contact"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-contact-conversations": {
    parameters: {
      query?: {
        /** @description [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property `statuses`, whose value should be a list of conversation statuses (`assigned`, `unassigned`, `archived`, or `trashed`). If ticketing is enabled, this endpoint accepts either `status_categories` (`open`, `waiting`, `resolved`) or `status_ids` as an alternative. */
        q?: components["parameters"]["conversationQuery"];
        /** @description Max number of results per [page](https://dev.frontapp.com/docs/pagination) */
        limit?: components["parameters"]["limit"];
        /** @description Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) */
        page_token?: components["parameters"]["pageToken"];
      };
      header?: never;
      path: {
        /** @description The Contact ID. Alternatively, you can supply the contact's source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        contact_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfConversations"];
    };
  };
  "add-contact-handle": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The contact ID. Alternatively, you can supply the contact's source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        contact_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ContactHandle"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "delete-contact-handle": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The contact ID. Alternatively, you can supply the contact's source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        contact_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DeleteContactHandle"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-notes": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The contact ID. Alternatively, you can supply the contact's source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        contact_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      202: components["responses"]["listOfContactNotes"];
    };
  };
  "add-note": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The contact ID. Alternatively, you can supply the contact's source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        contact_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateContactNote"];
      };
    };
    responses: {
      201: components["responses"]["contactNote"];
    };
  };
  "list-conversations": {
    parameters: {
      query?: {
        /** @description [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property `statuses`, whose value should be a list of conversation statuses (`assigned`, `unassigned`, `archived`, or `trashed`). If ticketing is enabled, this endpoint accepts either `status_categories` (`open`, `waiting`, `resolved`) or `status_ids` as an alternative. */
        q?: components["parameters"]["conversationQuery"];
        /** @description Max number of results per [page](https://dev.frontapp.com/docs/pagination) */
        limit?: components["parameters"]["limit"];
        /** @description Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) */
        page_token?: components["parameters"]["pageToken"];
        /** @description Field used to sort the conversations. Only supports `date`. */
        sort_by?: components["parameters"]["sortByConversations"];
        /** @description Order by which results should be sorted */
        sort_order?: components["parameters"]["sortOrder"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfConversations"];
    };
  };
  "create-conversation": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateConversation"];
      };
    };
    responses: {
      201: components["responses"]["conversation"];
    };
  };
  "list-conversation-custom-fields": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfCustomFields"];
    };
  };
  "search-conversations": {
    parameters: {
      query?: {
        /** @description Max number of results per [page](https://dev.frontapp.com/docs/pagination) */
        limit?: components["parameters"]["limit"];
        /** @description Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) */
        page_token?: components["parameters"]["pageToken"];
      };
      header?: never;
      path: {
        /** @description Search query string. See [Search](https://dev.frontapp.com/docs/search-1) topic for usage details. */
        query: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfConversationSearchResults"];
    };
  };
  "get-conversation-by-id": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The conversation ID */
        conversation_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["conversation"];
      /** @description If the conversation has been merged, the response redirects you to the merged conversation. */
      301: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "update-conversation": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The conversation ID */
        conversation_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpdateConversation"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description If the conversation has been merged, the response redirects you to the merged conversation. */
      301: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid input, such as invalid custom fields */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "update-conversation-assignee": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The conversation ID */
        conversation_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpdateConversationAssignee"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description If the conversation has been merged, the response redirects you to the merged conversation. */
      301: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-conversation-comments": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The conversation ID */
        conversation_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfComments"];
      /** @description If the conversation has been merged, the response redirects you to the merged conversation. */
      301: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "add-comment": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The conversation ID */
        conversation_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateComment"];
      };
    };
    responses: {
      201: components["responses"]["comment"];
      /** @description If the conversation has been merged, the response redirects you to the merged conversation. */
      301: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-conversation-drafts": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The conversation ID */
        conversation_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfMessages"];
      /** @description If the conversation has been merged, the response redirects you to the merged conversation. */
      301: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "create-draft-reply": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The conversation ID */
        conversation_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ReplyDraft"];
      };
    };
    responses: {
      200: components["responses"]["message"];
      /** @description If the conversation has been merged, the response redirects you to the merged conversation. */
      301: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-conversation-events": {
    parameters: {
      query?: {
        /** @description Max number of results per [page](https://dev.frontapp.com/docs/pagination) */
        limit?: components["parameters"]["limit"];
        /** @description Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) */
        page_token?: components["parameters"]["pageToken"];
      };
      header?: never;
      path: {
        /** @description The conversation ID */
        conversation_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfEvents"];
      /** @description If the conversation has been merged, the response redirects you to the merged conversation. */
      301: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-conversation-followers": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The conversation ID */
        conversation_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfTeammates"];
      /** @description If the conversation has been merged, the response redirects you to the merged conversation. */
      301: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "add-conversation-followers": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The conversation ID */
        conversation_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description IDs of the teammate to add to the followers list. Alternatively, you can supply the teammates as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
          teammate_ids: string[];
        };
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description If the conversation has been merged, the response redirects you to the merged conversation. */
      301: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "delete-conversation-followers": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The conversation ID */
        conversation_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description IDs of the teammate to remove from the followers list. Alternatively, you can supply the teammates as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
          teammate_ids: string[];
        };
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description If the conversation has been merged, the response redirects you to the merged conversation. */
      301: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-conversation-inboxes": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The conversation ID */
        conversation_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfInboxes"];
      /** @description If the conversation has been merged, the response redirects you to the merged conversation. */
      301: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "add-conversation-link": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The conversation ID */
        conversation_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Link IDs to add. Either link_ids or link_external_urls must be specified but not both */
          link_ids?: string[];
          /** @description Link external URLs to add. Creates links if necessary. Either link_ids or link_external_urls must be specified but not both */
          link_external_urls?: string[];
        };
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description If the conversation has been merged, the response redirects you to the merged conversation. */
      301: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "remove-conversation-links": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The conversation ID */
        conversation_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Link IDs to remove. */
          link_ids: string[];
        };
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description If the conversation has been merged, the response redirects you to the merged conversation. */
      301: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-conversation-messages": {
    parameters: {
      query?: {
        /** @description Max number of results per [page](https://dev.frontapp.com/docs/pagination) */
        limit?: components["parameters"]["limit"];
        /** @description Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) */
        page_token?: components["parameters"]["pageToken"];
        /** @description Field used to sort the messages. Only supports `created_at`. */
        sort_by?: components["parameters"]["sortByConversationMessages"];
        /** @description Order by which results should be sorted */
        sort_order?: components["parameters"]["sortOrder"];
      };
      header?: never;
      path: {
        /** @description The conversation ID */
        conversation_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfMessages"];
      /** @description If the conversation has been merged, the response redirects you to the merged conversation. */
      301: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "create-message-reply": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The conversation ID */
        conversation_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["OutboundReplyMessage"];
      };
    };
    responses: {
      202: components["responses"]["acceptedMessage"];
      /** @description If the conversation has been merged, the response redirects you to the merged conversation. */
      301: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "update-conversation-reminders": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The conversation ID */
        conversation_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpdateConversationReminders"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description If the conversation has been merged, the response redirects you to the merged conversation. */
      301: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "add-conversation-tag": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The conversation ID */
        conversation_id: string;
      };
      cookie?: never;
    };
    /** @description Tag IDs to add */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TagIds"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description If the conversation has been merged, the response redirects you to the merged conversation. */
      301: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "remove-conversation-tag": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The conversation ID */
        conversation_id: string;
      };
      cookie?: never;
    };
    /** @description Tag IDs to remove */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TagIds"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description If the conversation has been merged, the response redirects you to the merged conversation. */
      301: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-custom-fields": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfCustomFields"];
    };
  };
  "download-attachment": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Attachment ID */
        attachment_link_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["attachment"];
    };
  };
  "delete-draft": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The draft ID */
        draft_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DeleteDraft"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "edit-draft": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The draft ID */
        message_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["EditDraft"];
      };
    };
    responses: {
      200: components["responses"]["message"];
    };
  };
  "list-events": {
    parameters: {
      query?: {
        /** @description [Search query object](https://dev.frontapp.com/docs/query-object-q) with optional properties `before`, `after`, `types`, or `inboxes`. `before` and `after` should be a timestamp in seconds with up to 3 decimal places. `types` should be a list of [event types](https://dev.frontapp.com/reference/events). `inboxes` should be a list of inbox IDs. */
        q?: components["parameters"]["activityQuery"];
        /** @description Max number of results per page (max 15) */
        limit?: number;
        /** @description Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) */
        page_token?: components["parameters"]["pageToken"];
        /** @description Field used to sort the events. Only supports `created_at`. */
        sort_by?: components["parameters"]["sortByActivities"];
        /** @description Order by which results should be sorted */
        sort_order?: components["parameters"]["sortOrder"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfEvents"];
    };
  };
  "get-event": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The event ID */
        event_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["event"];
    };
  };
  "list-inboxes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfInboxes"];
    };
  };
  "create-inbox": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Inbox details */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateInbox"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-inbox-custom-fields": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfCustomFields"];
    };
  };
  "get-inbox": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Inbox ID */
        inbox_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["inbox"];
    };
  };
  "list-inbox-channels": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Inbox ID */
        inbox_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfChannels"];
    };
  };
  "create-a-channel": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Inbox ID */
        inbox_id: string;
      };
      cookie?: never;
    };
    /** @description Channel to create */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateChannel"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-inbox-conversations": {
    parameters: {
      query?: {
        /** @description [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property `statuses`, whose value should be a list of conversation statuses (`assigned`, `unassigned`, `archived`, or `trashed`). If ticketing is enabled, this endpoint accepts either `status_categories` (`open`, `waiting`, `resolved`) or `status_ids` as an alternative. */
        q?: components["parameters"]["conversationQuery"];
        /** @description Max number of results per [page](https://dev.frontapp.com/docs/pagination) */
        limit?: components["parameters"]["limit"];
        /** @description Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) */
        page_token?: components["parameters"]["pageToken"];
      };
      header?: never;
      path: {
        /** @description The Inbox ID */
        inbox_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfConversations"];
    };
  };
  "import-inbox-message": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Inbox ID */
        inbox_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ImportMessage"];
      };
    };
    responses: {
      202: components["responses"]["acceptedMessage"];
    };
  };
  "list-inbox-access": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Inbox ID */
        inbox_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfTeammates"];
    };
  };
  "add-inbox-access": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Inbox ID */
        inbox_id: string;
      };
      cookie?: never;
    };
    /** @description Teammate IDs to add. Alternatively, you can supply teammate emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TeammateIds"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "removes-inbox-access": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Inbox ID */
        inbox_id: string;
      };
      cookie?: never;
    };
    /** @description Teammate IDs to remove. Alternatively, you can supply teammate emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TeammateIds"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "get-a-knowledge-base-article": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the article to fetch */
        article_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["knowledgeBaseArticleSlim"];
    };
  };
  "delete-an-article": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the article to delete */
        article_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["knowledgeBaseArticleSlim"];
    };
  };
  "get-knowledge-base-article-with-content-in-default-locale": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the article to fetch */
        article_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["knowledgeBaseArticle"];
    };
  };
  "update-article-content-in-default-locale": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the article to update */
        article_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["KnowledgeBaseArticlePatch"];
      };
    };
    responses: {
      200: components["responses"]["knowledgeBaseArticle"];
    };
  };
  "download-attachment-from-an-article": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the article */
        article_id: string;
        /** @description The ID of the file to download */
        attachment_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["attachment"];
    };
  };
  "get-knowledge-base-article-with-content-in-specified-locale": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the article to fetch */
        article_id: string;
        /** @description The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the content to fetch */
        locale: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["knowledgeBaseArticle"];
    };
  };
  "update-article-content-in-specified-locale": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the article to update */
        article_id: string;
        /** @description The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the updated content */
        locale: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["KnowledgeBaseArticlePatch"];
      };
    };
    responses: {
      200: components["responses"]["knowledgeBaseArticle"];
    };
  };
  "get-a-knowledge-base-category": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the category to fetch */
        category_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["knowledgeBaseCategorySlim"];
    };
  };
  "delete-a-knowledge-base-category": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the category to delete */
        category_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-articles-in-a-category": {
    parameters: {
      query?: {
        /** @description Max number of results per [page](https://dev.frontapp.com/docs/pagination) */
        limit?: components["parameters"]["limit"];
        /** @description Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) */
        page_token?: components["parameters"]["pageToken"];
      };
      header?: never;
      path: {
        /** @description The ID of the category */
        category_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfKnowledgeBaseArticles"];
    };
  };
  "get-knowledge-base-category-content-in-default-locale": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the category to fetch */
        category_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["knowledgeBaseCategory"];
    };
  };
  "update-knowledge-base-category-in-default-locale": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the category to update */
        category_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["KnowledgeBaseCategoryPatch"];
      };
    };
    responses: {
      200: components["responses"]["knowledgeBaseCategory"];
    };
  };
  "get-knowledge-base-category-with-content-in-specified-locale": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the category to fetch */
        category_id: string;
        /** @description The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the content to fetch */
        locale: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["knowledgeBaseCategory"];
    };
  };
  "update-knowledge-base-category-in-specified-locale": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the category to update */
        category_id: string;
        /** @description The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the updated content */
        locale: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["KnowledgeBaseCategoryPatch"];
      };
    };
    responses: {
      200: components["responses"]["knowledgeBaseCategory"];
    };
  };
  "list-knowledge-bases": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfKnowledgeBases"];
    };
  };
  "create-a-knowledge-base": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["KnowledgeBaseCreate"];
      };
    };
    responses: {
      201: components["responses"]["knowledgeBase"];
    };
  };
  "get-a-knowledge-base": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the knowledge base to fetch */
        knowledge_base_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["knowledgeBaseSlim"];
    };
  };
  "list-articles-in-a-knowledge-base": {
    parameters: {
      query?: {
        /** @description Max number of results per [page](https://dev.frontapp.com/docs/pagination) */
        limit?: components["parameters"]["limit"];
        /** @description Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) */
        page_token?: components["parameters"]["pageToken"];
      };
      header?: never;
      path: {
        /** @description The ID of the knowledge base */
        knowledge_base_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfKnowledgeBaseArticles"];
    };
  };
  "create-article-in-a-knowledge-base-in-default-locale": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the knowledge base to create the article in */
        knowledge_base_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["KnowledgeBaseArticleCreate"];
      };
    };
    responses: {
      201: components["responses"]["knowledgeBaseArticle"];
    };
  };
  "list-categories-in-a-knowledge-base": {
    parameters: {
      query?: {
        /** @description Max number of results per [page](https://dev.frontapp.com/docs/pagination) */
        limit?: components["parameters"]["limit"];
        /** @description Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) */
        page_token?: components["parameters"]["pageToken"];
      };
      header?: never;
      path: {
        /** @description The ID of the knowledge base */
        knowledge_base_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfKnowledgeBaseCategories"];
    };
  };
  "create-knowledge-base-category-in-default-locale": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the knowledge base to create the category in */
        knowledge_base_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["KnowledgeBaseCategoryCreate"];
      };
    };
    responses: {
      201: components["responses"]["knowledgeBaseCategory"];
    };
  };
  "get-a-knowledge-base-with-content-in-default-locale": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the knowledge base to fetch */
        knowledge_base_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["knowledgeBase"];
    };
  };
  "update-knowledge-base-in-default-locale": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the knowledge base to update */
        knowledge_base_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["KnowledgeBasePatch"];
      };
    };
    responses: {
      200: components["responses"]["knowledgeBase"];
    };
  };
  "create-article-in-a-knowledge-base-in-specified-locale": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the knowledge base to create the article in */
        knowledge_base_id: string;
        /** @description The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the article's content */
        locale: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["KnowledgeBaseArticleCreate"];
      };
    };
    responses: {
      201: components["responses"]["knowledgeBaseArticle"];
    };
  };
  "create-knowledge-base-category-in-specified-locale": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the knowledge base to create the category in */
        knowledge_base_id: string;
        /** @description The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the category's content */
        locale: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["KnowledgeBaseCategoryCreate"];
      };
    };
    responses: {
      201: components["responses"]["knowledgeBaseCategory"];
    };
  };
  "get-a-knowledge-base-with-content-in-specified-locale": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the knowledge base to fetch */
        knowledge_base_id: string;
        /** @description The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the content to fetch */
        locale: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["knowledgeBase"];
    };
  };
  "update-knowledge-base-in-specified-locale": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the knowledge base to update */
        knowledge_base_id: string;
        /** @description The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the updated content */
        locale: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["KnowledgeBasePatch"];
      };
    };
    responses: {
      200: components["responses"]["knowledgeBase"];
    };
  };
  "list-links": {
    parameters: {
      query?: {
        /** @description [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property `types`, whose value should be a list of link types. Links created via the API have type `web` and links created by application objects have type `app_<uid>`, matching the app UID where the object is configured. There are also types `jira`, `asana`, `monday`, `trello`, and `github`, which correspond to the integrations built by Front. */
        q?: components["parameters"]["topicQuery"];
        /** @description Max number of results per [page](https://dev.frontapp.com/docs/pagination) */
        limit?: components["parameters"]["limit"];
        /** @description Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) */
        page_token?: components["parameters"]["pageToken"];
        /** @description Field used to sort the links. Only supports `id`. */
        sort_by?: components["parameters"]["sortByLinks"];
        /** @description Order by which results should be sorted */
        sort_order?: components["parameters"]["sortOrder"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfLinks"];
    };
  };
  "create-link": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Link to create */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateLink"];
      };
    };
    responses: {
      201: components["responses"]["link"];
    };
  };
  "list-link-custom-fields": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfCustomFields"];
    };
  };
  "get-link": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The link ID */
        link_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["link"];
    };
  };
  "update-a-link": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The link ID */
        link_id: string;
      };
      cookie?: never;
    };
    /** @description Link fields to update */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpdateLink"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-link-conversations": {
    parameters: {
      query?: {
        /** @description [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property `statuses`, whose value should be a list of conversation statuses (`assigned`, `unassigned`, `archived`, or `trashed`). If ticketing is enabled, this endpoint accepts either `status_categories` (`open`, `waiting`, `resolved`) or `status_ids` as an alternative. */
        q?: components["parameters"]["conversationQuery"];
        /** @description Max number of results per [page](https://dev.frontapp.com/docs/pagination) */
        limit?: components["parameters"]["limit"];
        /** @description Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) */
        page_token?: components["parameters"]["pageToken"];
        /** @description Field used to sort the conversations. Only supports `date`. */
        sort_by?: components["parameters"]["sortByConversations"];
        /** @description Order by which results should be sorted */
        sort_order?: components["parameters"]["sortOrder"];
      };
      header?: never;
      path: {
        /** @description The Link ID */
        link_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfConversations"];
    };
  };
  "api-token-details": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["identity"];
    };
  };
  "list-folders": {
    parameters: {
      query?: {
        /** @description Field used to sort the message template folders. Either `created_at` or `updated_at`. */
        sort_by?: components["parameters"]["sortByCannedAnswerFolders"];
        /** @description Order by which results should be sorted */
        sort_order?: components["parameters"]["sortOrder"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfCannedAnswerFolders"];
    };
  };
  "create-folder": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Message template folder to create */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateMessageTemplateFolder"];
      };
    };
    responses: {
      201: components["responses"]["cannedAnswerFolder"];
    };
  };
  "get-folder": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The message template folder ID */
        message_template_folder_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["cannedAnswerFolder"];
    };
  };
  "delete-folder": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The message template folder id */
        message_template_folder_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      202: components["responses"]["acceptedCannedAnswerFolderDeletion"];
    };
  };
  "update-folder": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The message template folder ID */
        message_template_folder_id: string;
      };
      cookie?: never;
    };
    /** @description Message template folder to update */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpdateMessageTemplateFolder"];
      };
    };
    responses: {
      200: components["responses"]["cannedAnswerFolder"];
    };
  };
  "get-child-folders": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The message template folder ID */
        message_template_folder_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfCannedAnswerFolders"];
    };
  };
  "create-child-folder": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The parent message template folder ID */
        message_template_folder_id: string;
      };
      cookie?: never;
    };
    /** @description Message template folder to create */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateMessageTemplateFolderAsChild"];
      };
    };
    responses: {
      201: components["responses"]["cannedAnswerFolder"];
    };
  };
  "get-child-templates": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The message template folder ID */
        message_template_folder_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfCannedAnswerFolders"];
    };
  };
  "create-child-template": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The parent message template folder ID */
        message_template_folder_id: string;
      };
      cookie?: never;
    };
    /** @description Message template to create */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateMessageTemplateAsChild"];
      };
    };
    responses: {
      201: components["responses"]["cannedAnswer"];
    };
  };
  "list-message-templates": {
    parameters: {
      query?: {
        /** @description Field used to sort the message templates. Either `created_at`, `updated_at`, or `sort_order`. */
        sort_by?: components["parameters"]["sortByCannedAnswers"];
        /** @description Order by which results should be sorted */
        sort_order?: components["parameters"]["sortOrder"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfCannedAnswers"];
    };
  };
  "create-message-template": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Message template to create */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateSharedMessageTemplate"];
      };
    };
    responses: {
      201: components["responses"]["cannedAnswer"];
    };
  };
  "get-message-template": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The message template ID */
        message_template_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["cannedAnswer"];
    };
  };
  "delete-message-template": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The message template ID */
        message_template_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "update-message-template": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The message template ID */
        message_template_id: string;
      };
      cookie?: never;
    };
    /** @description Message template to update */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpdateMessageTemplate"];
      };
    };
    responses: {
      200: components["responses"]["cannedAnswer"];
    };
  };
  "download-attachment-for-a-message-template": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Message Template ID */
        message_template_id: string;
        /** @description The Attachment ID */
        attachment_link_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["attachment"];
    };
  };
  "get-message": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The message ID */
        message_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["message"];
    };
  };
  "download-attachment-for-a-message": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Message ID */
        message_id: string;
        /** @description The Attachment ID */
        attachment_link_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["attachment"];
    };
  };
  "get-message-seen-status": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The message ID */
        message_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfSeenReceipts"];
    };
  };
  "mark-message-seen": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The message ID */
        message_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-rules": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfRules"];
    };
  };
  "get-rule": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Rule ID */
        rule_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["rule"];
    };
  };
  "list-shifts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfShifts"];
    };
  };
  "create-shift": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Shift to create details */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateShift"];
      };
    };
    responses: {
      201: components["responses"]["shift"];
    };
  };
  "get-shift": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Shift ID */
        shift_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["shift"];
    };
  };
  "update-shift": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Shift ID */
        shift_id: string;
      };
      cookie?: never;
    };
    /** @description Updated Shift Body */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpdateShift"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-shifts-teammates": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Shift ID */
        shift_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfTeammates"];
    };
  };
  "add-teammates-to-shift": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Shift ID */
        shift_id: string;
      };
      cookie?: never;
    };
    /** @description Teammate IDs to add. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TeammateIds"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "remove-teammates-from-shift": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Shift ID */
        shift_id: string;
      };
      cookie?: never;
    };
    /** @description Teammate IDs to remove. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TeammateIds"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "get-signatures": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The signature ID */
        signature_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["signature"];
    };
  };
  "delete-signature": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The signature ID */
        signature_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "update-signature": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The signature ID */
        signature_id: string;
      };
      cookie?: never;
    };
    /** @description Signature to update */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpdateSignature"];
      };
    };
    responses: {
      200: components["responses"]["signature"];
    };
  };
  "list-tags": {
    parameters: {
      query?: {
        /** @description Max number of results per [page](https://dev.frontapp.com/docs/pagination) */
        limit?: components["parameters"]["limit"];
        /** @description Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) */
        page_token?: components["parameters"]["pageToken"];
        /** @description Field used to sort the tags. Only supports `id`. */
        sort_by?: components["parameters"]["sortByTags"];
        /** @description Order by which results should be sorted */
        sort_order?: components["parameters"]["sortOrder"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfTags"];
    };
  };
  "create-tag": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Tag to create */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateTag"];
      };
    };
    responses: {
      201: components["responses"]["tag"];
    };
  };
  "get-tag": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The tag ID */
        tag_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["tag"];
    };
  };
  "delete-tag": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the tag to delete */
        tag_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "update-a-tag": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The tag ID */
        tag_id: string;
      };
      cookie?: never;
    };
    /** @description Child Tag to update */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpdateTag"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-tag-children": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The tag ID */
        tag_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfTags"];
    };
  };
  "create-child-tag": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The tag ID */
        tag_id: string;
      };
      cookie?: never;
    };
    /** @description Child Tag to create */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateTag"];
      };
    };
    responses: {
      201: components["responses"]["tag"];
    };
  };
  "list-tagged-conversations": {
    parameters: {
      query?: {
        /** @description [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property `statuses`, whose value should be a list of conversation statuses (`assigned`, `unassigned`, `archived`, or `trashed`). If ticketing is enabled, this endpoint accepts either `status_categories` (`open`, `waiting`, `resolved`) or `status_ids` as an alternative. */
        q?: components["parameters"]["conversationQuery"];
        /** @description Max number of results per [page](https://dev.frontapp.com/docs/pagination) */
        limit?: components["parameters"]["limit"];
        /** @description Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) */
        page_token?: components["parameters"]["pageToken"];
      };
      header?: never;
      path: {
        /** @description The ID of the tag */
        tag_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfConversations"];
    };
  };
  "list-company-teammate-groups": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfTeammateGroups"];
    };
  };
  "create-company-teammate-group": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateTeammateGroup"];
      };
    };
    responses: {
      201: components["responses"]["teammateGroup"];
    };
  };
  "get-company-teammate-group": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The teammate group ID. */
        teammate_group_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["teammateGroup"];
    };
  };
  "delete-company-teammate-group": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The teammate group ID. */
        teammate_group_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "update-a-company-teammate-group": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The teammate group ID. */
        teammate_group_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpdateTeammateGroup"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-company-teammate-group-team-inboxes": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The teammate group ID. */
        teammate_group_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfInboxes"];
    };
  };
  "add-company-teammate-group-team-inboxes": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The teammate group ID. */
        teammate_group_id: string;
      };
      cookie?: never;
    };
    /** @description Inbox IDs to add */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["InboxIds"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "remove-company-teammate-group-team-inboxes": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The teammate group ID. */
        teammate_group_id: string;
      };
      cookie?: never;
    };
    /** @description Inbox IDs to remove */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["InboxIds"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-company-teammate-group-teammates": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The teammate group ID. */
        teammate_group_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfTeammates"];
    };
  };
  "add-company-teammate-group-teammates": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The teammate group ID. */
        teammate_group_id: string;
      };
      cookie?: never;
    };
    /** @description Teammate IDs to add. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TeammateIds"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "remove-company-teammate-group-teammates": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The teammate group ID. */
        teammate_group_id: string;
      };
      cookie?: never;
    };
    /** @description Teammate IDs to remove. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TeammateIds"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-company-teammate-group-teams": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The teammate group ID. */
        teammate_group_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfTeams"];
    };
  };
  "add-company-teammate-group-teams": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The teammate group ID. */
        teammate_group_id: string;
      };
      cookie?: never;
    };
    /** @description Team IDs to add */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TeamIds"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "remove-company-teammate-group-teams": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The teammate group ID. */
        teammate_group_id: string;
      };
      cookie?: never;
    };
    /** @description Team IDs to remove. */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TeamIds"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-teammates": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfTeammates"];
    };
  };
  "list-teammate-custom-fields": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfCustomFields"];
    };
  };
  "get-teammate": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        teammate_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["teammate"];
    };
  };
  "update-teammate": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        teammate_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpdateTeammate"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-teammate-channels": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        teammate_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfChannels"];
    };
  };
  "list-teammate-groups": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        teammate_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfContactLists"];
    };
  };
  "create-teammate-group": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        teammate_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateContactList"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-teammate-contact-lists": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        teammate_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfContactLists"];
    };
  };
  "create-teammate-contact-list": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        teammate_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateContactList"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-teammate-contacts": {
    parameters: {
      query?: {
        /** @description [Search query object](https://dev.frontapp.com/docs/query-object-q) with the optional properties `updated_after` and `updated_before`, whose value should be a timestamp in seconds with up to 3 decimal places. */
        q?: components["parameters"]["cardQuery"];
        /** @description Max number of results per [page](https://dev.frontapp.com/docs/pagination) */
        limit?: components["parameters"]["limit"];
        /** @description Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) */
        page_token?: components["parameters"]["pageToken"];
        /** @description Field used to sort the contacts. Either `created_at` or `updated_at`. */
        sort_by?: components["parameters"]["sortByCards"];
        /** @description Order by which results should be sorted */
        sort_order?: components["parameters"]["sortOrder"];
      };
      header?: never;
      path: {
        /** @description The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        teammate_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfContacts"];
    };
  };
  "create-teammate-contact": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        teammate_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateContact"];
      };
    };
    responses: {
      201: components["responses"]["contact"];
    };
  };
  "list-assigned-conversations": {
    parameters: {
      query?: {
        /** @description [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property `statuses`, whose value should be a list of conversation statuses (`assigned`, `unassigned`, `archived`, or `trashed`). If ticketing is enabled, this endpoint accepts either `status_categories` (`open`, `waiting`, `resolved`) or `status_ids` as an alternative. */
        q?: components["parameters"]["conversationQuery"];
        /** @description Max number of results per [page](https://dev.frontapp.com/docs/pagination) */
        limit?: components["parameters"]["limit"];
        /** @description Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) */
        page_token?: components["parameters"]["pageToken"];
      };
      header?: never;
      path: {
        /** @description The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        teammate_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfConversations"];
    };
  };
  "list-teammate-inboxes": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        teammate_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfInboxes"];
    };
  };
  "list-teammate-folders": {
    parameters: {
      query?: {
        /** @description Field used to sort the message template folders. Either `created_at` or `updated_at`. */
        sort_by?: components["parameters"]["sortByCannedAnswerFolders"];
        /** @description Order by which results should be sorted */
        sort_order?: components["parameters"]["sortOrder"];
      };
      header?: never;
      path: {
        /** @description The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        teammate_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfCannedAnswerFolders"];
    };
  };
  "create-teammate-folder": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        teammate_id: string;
      };
      cookie?: never;
    };
    /** @description Message template folder to create */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateMessageTemplateFolder"];
      };
    };
    responses: {
      201: components["responses"]["cannedAnswerFolder"];
    };
  };
  "list-teammate-message-templates": {
    parameters: {
      query?: {
        /** @description Field used to sort the message templates. Either `created_at`, `updated_at`, or `sort_order`. */
        sort_by?: components["parameters"]["sortByCannedAnswers"];
        /** @description Order by which results should be sorted */
        sort_order?: components["parameters"]["sortOrder"];
      };
      header?: never;
      path: {
        /** @description The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        teammate_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfCannedAnswers"];
    };
  };
  "create-teammate-message-template": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        teammate_id: string;
      };
      cookie?: never;
    };
    /** @description Message template to create */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreatePrivateMessageTemplate"];
      };
    };
    responses: {
      201: components["responses"]["cannedAnswer"];
    };
  };
  "list-teammate-rules": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        teammate_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfRules"];
    };
  };
  "list-teammate-shifts": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        teammate_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfShifts"];
    };
  };
  "list-teammate-signatures": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        teammate_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfSignatures"];
    };
  };
  "create-teammate-signature": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        teammate_id: string;
      };
      cookie?: never;
    };
    /** @description Signature to create */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreatePrivateSignature"];
      };
    };
    responses: {
      201: components["responses"]["signature"];
    };
  };
  "list-teammate-tags": {
    parameters: {
      query?: {
        /** @description Max number of results per [page](https://dev.frontapp.com/docs/pagination) */
        limit?: components["parameters"]["limit"];
        /** @description Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) */
        page_token?: components["parameters"]["pageToken"];
        /** @description Field used to sort the tags. Only supports `id`. */
        sort_by?: components["parameters"]["sortByTags"];
        /** @description Order by which results should be sorted */
        sort_order?: components["parameters"]["sortOrder"];
      };
      header?: never;
      path: {
        /** @description The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        teammate_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfTags"];
    };
  };
  "create-teammate-tag": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
        teammate_id: string;
      };
      cookie?: never;
    };
    /** @description Tag to create */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateTag"];
      };
    };
    responses: {
      201: components["responses"]["tag"];
    };
  };
  "list-teams": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfTeams"];
    };
  };
  "get-team": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Team ID */
        team_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["team"];
    };
  };
  "list-team-channels": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The team ID */
        team_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfChannels"];
    };
  };
  "list-team-groups": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The team ID */
        team_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfContactLists"];
    };
  };
  "create-team-group": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The team ID */
        team_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateContactList"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-team-contact-lists": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The team ID */
        team_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfContactLists"];
    };
  };
  "create-team-contact-list": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The team ID */
        team_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateContactList"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-team-contacts": {
    parameters: {
      query?: {
        /** @description [Search query object](https://dev.frontapp.com/docs/query-object-q) with the optional properties `updated_after` and `updated_before`, whose value should be a timestamp in seconds with up to 3 decimal places. */
        q?: components["parameters"]["cardQuery"];
        /** @description Max number of results per [page](https://dev.frontapp.com/docs/pagination) */
        limit?: components["parameters"]["limit"];
        /** @description Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) */
        page_token?: components["parameters"]["pageToken"];
        /** @description Field used to sort the contacts. Either `created_at` or `updated_at`. */
        sort_by?: components["parameters"]["sortByCards"];
        /** @description Order by which results should be sorted */
        sort_order?: components["parameters"]["sortOrder"];
      };
      header?: never;
      path: {
        /** @description The team ID */
        team_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfContacts"];
    };
  };
  "create-team-contact": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The team ID */
        team_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateContact"];
      };
    };
    responses: {
      201: components["responses"]["contact"];
    };
  };
  "list-team-inboxes": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The team ID */
        team_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfInboxes"];
    };
  };
  "create-team-inbox": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The team ID */
        team_id: string;
      };
      cookie?: never;
    };
    /** @description Inbox details */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateInbox"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-team-folders": {
    parameters: {
      query?: {
        /** @description Field used to sort the message template folders. Either `created_at` or `updated_at`. */
        sort_by?: components["parameters"]["sortByCannedAnswerFolders"];
        /** @description Order by which results should be sorted */
        sort_order?: components["parameters"]["sortOrder"];
      };
      header?: never;
      path: {
        /** @description The team ID */
        team_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfCannedAnswerFolders"];
    };
  };
  "create-team-folder": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The team ID */
        team_id: string;
      };
      cookie?: never;
    };
    /** @description Message template folder to create */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateMessageTemplateFolder"];
      };
    };
    responses: {
      201: components["responses"]["cannedAnswerFolder"];
    };
  };
  "list-team-message-templates": {
    parameters: {
      query?: {
        /** @description Field used to sort the message templates. Either `created_at`, `updated_at`, or `sort_order`. */
        sort_by?: components["parameters"]["sortByCannedAnswers"];
        /** @description Order by which results should be sorted */
        sort_order?: components["parameters"]["sortOrder"];
      };
      header?: never;
      path: {
        /** @description The team ID */
        team_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfCannedAnswers"];
    };
  };
  "create-team-message-template": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The team ID */
        team_id: string;
      };
      cookie?: never;
    };
    /** @description Message template to create */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateSharedMessageTemplate"];
      };
    };
    responses: {
      201: components["responses"]["cannedAnswer"];
    };
  };
  "list-team-rules": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The team ID */
        team_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfRules"];
    };
  };
  "list-team-shifts": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The team ID */
        team_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfShifts"];
    };
  };
  "create-team-shift": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Team ID */
        team_id: string;
      };
      cookie?: never;
    };
    /** @description Shift to create details */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateShift"];
      };
    };
    responses: {
      201: components["responses"]["shift"];
    };
  };
  "list-team-signatures": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The team ID */
        team_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfSignatures"];
    };
  };
  "create-team-signature": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The team ID */
        team_id: string;
      };
      cookie?: never;
    };
    /** @description Signature to create */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateSharedSignature"];
      };
    };
    responses: {
      201: components["responses"]["signature"];
    };
  };
  "list-team-tags": {
    parameters: {
      query?: {
        /** @description Max number of results per [page](https://dev.frontapp.com/docs/pagination) */
        limit?: components["parameters"]["limit"];
        /** @description Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) */
        page_token?: components["parameters"]["pageToken"];
        /** @description Field used to sort the tags. Only supports `id`. */
        sort_by?: components["parameters"]["sortByTags"];
        /** @description Order by which results should be sorted */
        sort_order?: components["parameters"]["sortOrder"];
      };
      header?: never;
      path: {
        /** @description The team ID */
        team_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["listOfTags"];
    };
  };
  "create-team-tag": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The team ID */
        team_id: string;
      };
      cookie?: never;
    };
    /** @description Tag to create */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateTag"];
      };
    };
    responses: {
      201: components["responses"]["tag"];
    };
  };
  "add-teammates-to-team": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Team ID */
        team_id: string;
      };
      cookie?: never;
    };
    /** @description Teammate IDs to add. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TeammateIds"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "remove-teammates-from-team": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The Team ID */
        team_id: string;
      };
      cookie?: never;
    };
    /** @description Teammate IDs to remove from the team. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TeammateIds"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
type WithRequired<T, K extends keyof T> = T & {
  [P in K]-?: T[P];
};
